
    <!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>The Flask Mega-Tutorial</title>
    <link href="style.css" rel="stylesheet" type="text/css" />
    </head>
    <div id="main">
 <div class="post">
  <p class="date">
   <span class="flask-moment" data-format="format('LL')" data-refresh="0" data-timestamp="2012-07-16T03:44:16Z">
    2012-07-16T03:44:16Z
   </span>
  </p>
  <h1 class="post-title">
   <a href="/post/the-flask-mega-tutorial-part-vi-profile-page-and-avatars">
    The Flask Mega-Tutorial, Part VI: Profile Page And Avatars
   </a>
  </h1>
  <div class="post_body">
   <p>
    This is the sixth article in the series in which I document my experience writing web applications in
    <a href="http://python.org">
     Python
    </a>
    using the
    <a href="http://flask.pocoo.org">
     Flask
    </a>
    microframework.
   </p>
   <p>
    The goal of the tutorial series is to develop a decently featured microblogging application that demonstrating total lack of originality I have decided to call
    <code>
     microblog
    </code>
    .
   </p>
   <p>
    <strong>
     NOTE
    </strong>
    : This article was revised in September 2014 to be in sync with current versions of Python and Flask.
   </p>
   <p>
    Here is an index of all the articles in the series that have been published to date:
   </p>
   <ul>
    <li>
     <a href="the-flask-mega-tutorial-part-i-hello-world">
      Part I: Hello, World!
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-ii-templates">
      Part II: Templates
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-iii-web-forms">
      Part III: Web Forms
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-iv-database">
      Part IV: Database
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-v-user-logins">
      Part V: User Logins
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-vi-profile-page-and-avatars">
      Part VI: Profile Page And Avatars
     </a>
     (this article)
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-vii-unit-testing">
      Part VII: Unit Testing
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-viii-followers-contacts-and-friends">
      Part VIII: Followers, Contacts And Friends
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-ix-pagination">
      Part IX: Pagination
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-x-full-text-search">
      Part X: Full Text Search
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xi-email-support">
      Part XI: Email Support
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xii-facelift">
      Part XII: Facelift
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xiii-dates-and-times">
      Part XIII: Dates and Times
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xiv-i18n-and-l10n">
      Part XIV: I18n and L10n
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xv-ajax">
      Part XV: Ajax
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xvi-debugging-testing-and-profiling">
      Part XVI: Debugging, Testing and Profiling
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi">
      Part XVII: Deployment on Linux (even on the Raspberry Pi!)
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud">
      Part XVIII: Deployment on the Heroku Cloud
     </a>
    </li>
   </ul>
   <h2>
    Recap
   </h2>
   <p>
    In the previous chapter of this tutorial we created our user login system, so we can now have users log in and out of the website using their OpenIDs.
   </p>
   <p>
    Today, we are going to work on the user profiles. First, we'll create the user profile page, which shows the user's information and more recent blog posts, and as part of that we will learn how to show user avatars. Then we are going to create a web form for users to edit their profiles.
   </p>
   <h2>
    User Profile Page
   </h2>
   <p>
    Creating a user profile page does not really require any new major concepts to be introduced. We just need to create a new view function and its accompanying HTML template.
   </p>
   <p>
    Here is the view function (file
    <code>
     app/views.py
    </code>
    ):
   </p>
   <pre><code>@app.route('/user/&lt;nickname&gt;')
@login_required
def user(nickname):
    user = User.query.filter_by(nickname=nickname).first()
    if user == None:
        flash('User %s not found.' % nickname)
        return redirect(url_for('index'))
    posts = [
        {'author': user, 'body': 'Test post #1'},
        {'author': user, 'body': 'Test post #2'}
    ]
    return render_template('user.html',
                           user=user,
                           posts=posts)
</code></pre>
   <p>
    The
    <code>
     @app.route
    </code>
    decorator that we used to declare this view function looks a little bit different than the previous ones. In this case we have an
    <em>
     argument
    </em>
    in it, which is indicated as
    <code>
     &lt;nickname&gt;
    </code>
    . This translates into an argument of the same name added to the view function. When the client requests, say, URL
    <code>
     /user/miguel
    </code>
    the view function will be invoked with
    <code>
     nickname
    </code>
    set to
    <code>
     'miguel'
    </code>
    .
   </p>
   <p>
    The implementation of the view function should have no surprises. First we try to load the user from the database, using the nickname that we received as argument. If that doesn't work then we just redirect to the main page with an error message, as we have seen in the previous chapter.
   </p>
   <p>
    Once we have our user, we just send it in the
    <code>
     render_template
    </code>
    call, along with some fake posts. Note that in the user profile page we will be displaying only posts by this user, so our fake posts have the
    <code>
     author
    </code>
    field correctly set.
   </p>
   <p>
    Our initial view template will be extremely simple (file
    <code>
     app/templates/user.html
    </code>
    ):
   </p>
   <pre><code>&lt;!-- extend base layout --&gt;
{% extends "base.html" %}

{% block content %}
  &lt;h1&gt;User: {{ user.nickname }}!&lt;/h1&gt;
  &lt;hr&gt;
  {% for post in posts %}
  &lt;p&gt;
    {{ post.author.nickname }} says: &lt;b&gt;{{ post.body }}&lt;/b&gt;
  &lt;/p&gt;
  {% endfor %}
{% endblock %}
</code></pre>
   <p>
    The profile page is now complete, but a link to it does not exist anywhere in the web site. To make it a bit more easy for a user to check his or her own profile, we are going to add a link to it in the navigation bar at the top (file `app/templates/base.html'):
   </p>
   <pre><code>    &lt;div&gt;Microblog:
        &lt;a href="{{ url_for('index') }}"&gt;Home&lt;/a&gt;
        {% if g.user.is_authenticated %}
        | &lt;a href="{{ url_for('user', nickname=g.user.nickname) }}"&gt;Your Profile&lt;/a&gt;
        | &lt;a href="{{ url_for('logout') }}"&gt;Logout&lt;/a&gt;
        {% endif %}
    &lt;/div&gt;
</code></pre>
   <p>
    Note how in the
    <code>
     url_for
    </code>
    function we have added the required
    <code>
     nickname
    </code>
    argument.
   </p>
   <p>
    Give the application a try now. Clicking on the
    <code>
     Your Profile
    </code>
    link at the top should take you to your user page. Since we don't have any links that will direct you to an arbitrary user profile page you will need to type the URL by hand if you want to see someone else. For example, you would type
    <code>
     http://localhost:5000/user/miguel
    </code>
    to see the profile of user
    <code>
     miguel
    </code>
    .
   </p>
   <h2>
    Avatars
   </h2>
   <p>
    I'm sure you agree that our profile pages are pretty boring. To make them a bit more interesting, let's add user avatars.
   </p>
   <p>
    Instead of having to deal with a possibly large collection of uploaded images in our server, we will rely on the
    <a href="http://gravatar.com">
     Gravatar
    </a>
    service to provide our user avatars.
   </p>
   <p>
    Since returning an avatar is a user related task, we will be putting it in the
    <code>
     User
    </code>
    class (file
    <code>
     app/models.py
    </code>
    ):
   </p>
   <pre><code>from hashlib import md5
# ...
class User(db.Model):
    # ...
    def avatar(self, size):
        return 'http://www.gravatar.com/avatar/%s?d=mm&amp;s=%d' % (md5(self.email.encode('utf-8')).hexdigest(), size)
</code></pre>
   <p>
    The
    <code>
     avatar
    </code>
    method of
    <code>
     User
    </code>
    returns the URL of the user's avatar image, scaled to the requested size in pixels.
   </p>
   <p>
    Turns out with the Gravatar service this is really easy to do. You just need to create an md5 hash of the user email and then incorporate it into the specially crafted URL that you see above. After the md5 of the email you can provide a number of options to customize the avatar. The
    <code>
     d=mm
    </code>
    determines what placeholder image is returned when a user does not have an Gravatar account. The
    <code>
     mm
    </code>
    option returns the "mystery man" image, a gray silhouette of a person. The
    <code>
     s=N
    </code>
    option requests the avatar scaled to the given size in pixels.
   </p>
   <p>
    The Gravatar's website has
    <a href="https://gravatar.com/site/implement/images">
     documentation
    </a>
    for the avatar URL.
   </p>
   <p>
    Now that our
    <code>
     User
    </code>
    class knows how to return avatar images, we can incorporate them into our profile page layout (file
    <code>
     app/templates/user.html
    </code>
    ):
   </p>
   <pre><code>&lt;!-- extend base layout --&gt;
{% extends "base.html" %}

{% block content %}
  &lt;table&gt;
      &lt;tr valign="top"&gt;
          &lt;td&gt;&lt;img src="{{ user.avatar(128) }}"&gt;&lt;/td&gt;
          &lt;td&gt;&lt;h1&gt;User: {{ user.nickname }}&lt;/h1&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
  &lt;hr&gt;
  {% for post in posts %}
  &lt;p&gt;
    {{ post.author.nickname }} says: &lt;b&gt;{{ post.body }}&lt;/b&gt;
  &lt;/p&gt;
  {% endfor %}
{% endblock %}
</code></pre>
   <p>
    The nice thing about making the
    <code>
     User
    </code>
    class responsible for returning avatars is that if some day we decide Gravatar avatars are not what we want, we just rewrite the
    <code>
     avatar
    </code>
    method to return different URLs (even ones that points to our own web server, if we decide we want to host our own avatars), and all our templates will start showing the new avatars automatically.
   </p>
   <p>
    We have added the user avatar to the top of the profile page, but at the bottom of the page we have posts, and those could have a little avatar as well. For the user profile page we will of course be showing the same avatar for all the posts, but then when we move this functionality to the main page we will have each post decorated with the author's avatar, and that will look really nice.
   </p>
   <p>
    To show avatars for the posts we just need to make a small change in our template (file `app/templates/user.html'):
   </p>
   <pre><code>&lt;!-- extend base layout --&gt;
{% extends "base.html" %}

{% block content %}
  &lt;table&gt;
      &lt;tr valign="top"&gt;
          &lt;td&gt;&lt;img src="{{ user.avatar(128) }}"&gt;&lt;/td&gt;
          &lt;td&gt;&lt;h1&gt;User: {{ user.nickname }}&lt;/h1&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
  &lt;hr&gt;
  {% for post in posts %}
  &lt;table&gt;
      &lt;tr valign="top"&gt;
          &lt;td&gt;&lt;img src="{{ post.author.avatar(50) }}"&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;{{ post.author.nickname }} says:&lt;/i&gt;&lt;br&gt;{{ post.body }}&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
  {% endfor %}
{% endblock %}
</code></pre>
   <p>
    Here is how our profile page looks at this point:
   </p>
   <p>
   </p>
   <center>
    <img alt="microblog profile page" src="images/flask-mega-tutorial-part-vi-1.png"/>
   </center>
   <h2>
    Reusing at the sub-template level
   </h2>
   <p>
    We designed the user profile page so that it displays the posts written by the user. Our index page also displays posts, this time of any user. So now we have two templates that will need to display posts made by users. We could just copy/paste the portion of the template that deals with the rendering of a post, but that is really not ideal, because when we decide to change the layout of a post we'll have to remember to go update all the templates that have posts in them.
   </p>
   <p>
    Instead, we are going to make a sub-template that just renders a post, then we'll include it in all the templates that need it.
   </p>
   <p>
    To start, we create a post sub-template, which is really nothing more than a regular template. We do so by simply extracting the HTML for a post from our user template (file
    <code>
     /app/templates/post.html
    </code>
    ):
   </p>
   <pre><code>&lt;table&gt;
    &lt;tr valign="top"&gt;
        &lt;td&gt;&lt;img src="{{ post.author.avatar(50) }}"&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;{{ post.author.nickname }} says:&lt;/i&gt;&lt;br&gt;{{ post.body }}&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre>
   <p>
    And then we invoke this sub-template from our user template using Jinja2's
    <code>
     include
    </code>
    command (file
    <code>
     app/templates/user.html
    </code>
    ):
   </p>
   <pre><code>&lt;!-- extend base layout --&gt;
{% extends "base.html" %}

{% block content %}
  &lt;table&gt;
      &lt;tr valign="top"&gt;
          &lt;td&gt;&lt;img src="{{ user.avatar(128) }}"&gt;&lt;/td&gt;
          &lt;td&gt;&lt;h1&gt;User: {{ user.nickname }}&lt;/h1&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
  &lt;hr&gt;
  {% for post in posts %}
      {% include 'post.html' %}
  {% endfor %}
{% endblock %}
</code></pre>
   <p>
    Once we have a fully functioning index page we will invoke this same sub-template from over there, but we aren't quite ready to do that, we'll leave that for a future chapter of this tutorial.
   </p>
   <h2>
    More interesting profiles
   </h2>
   <p>
    While we now have a nice profile page, we don't really have much information to show on it. Users like to tell a bit about them on these pages, so we'll let them write something about themselves that we can show here. We will also keep track of what was the last time each user accessed the site, so that we can also show that on their profile page.
   </p>
   <p>
    To add these things we have to start by modifying our database. More specifically, we need to add two new fields to our
    <code>
     User
    </code>
    class (file
    <code>
     app/models.py
    </code>
    ):
   </p>
   <pre><code>class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nickname = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    posts = db.relationship('Post', backref='author', lazy='dynamic')
    about_me = db.Column(db.String(140))
    last_seen = db.Column(db.DateTime)
</code></pre>
   <p>
    Every time we modify the database we have to generate a new migration. Remember that in the database chapter we went through the pain of setting up a database migration system. We can see the fruits of that effort now. To add these two new fields to our database we just do this:
   </p>
   <pre><code>$ ./db_migrate.py
</code></pre>
   <p>
    To which our script will respond:
   </p>
   <pre><code>New migration saved as db_repository/versions/003_migration.py
Current database version: 3
</code></pre>
   <p>
    And our two new fields are now in our database. Remember that if you are on Windows the way to invoke this script is different.
   </p>
   <p>
    If we did not have migration support you would have needed to edit your database manually, or worse, delete it and recreate it from scratch.
   </p>
   <p>
    Next, let's modify our profile page template to show these fields (file
    <code>
     app/templates/user.html
    </code>
    ):
   </p>
   <pre><code>&lt;!-- extend base layout --&gt;
{% extends "base.html" %}

{% block content %}
  &lt;table&gt;
    &lt;tr valign="top"&gt;
      &lt;td&gt;&lt;img src="{{user.avatar(128)}}"&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;h1&gt;User: {{user.nickname}}&lt;/h1&gt;
          {% if user.about_me %}&lt;p&gt;{{ user.about_me }}&lt;/p&gt;{% endif %}
          {% if user.last_seen %}&lt;p&gt;&lt;i&gt;Last seen on: {{ user.last_seen }}&lt;/i&gt;&lt;/p&gt;{% endif %}
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  &lt;hr&gt;
  {% for post in posts %}
    {% include 'post.html' %}
  {% endfor %}
{% endblock %}
</code></pre>
   <p>
    Note we make use of Jinja2's conditionals to show these fields, because we only want to show them if they are set (at this point these two new fields are empty for all users, so nothing will show).
   </p>
   <p>
    The
    <code>
     last_seen
    </code>
    field is pretty easy to support. Remember that in a previous chapter we created a
    <code>
     before_request
    </code>
    handler, to register the logged in user with the
    <code>
     flask.g
    </code>
    global, as
    <code>
     g.user
    </code>
    . That is the perfect time to update our database with the last access time for a user (file
    <code>
     app/views.py
    </code>
    ):
   </p>
   <pre><code>from datetime import datetime
# ...
@app.before_request
def before_request():
    g.user = current_user
    if g.user.is_authenticated:
        g.user.last_seen = datetime.utcnow()
        db.session.add(g.user)
        db.session.commit()
</code></pre>
   <p>
    If you log in to your profile page again the last seen time will now display, and each time you refresh the page the time will update as well, because each time the browser makes a request the
    <code>
     before_request
    </code>
    handler will update the time in the database.
   </p>
   <p>
    Note that we are writing the time in the standard UTC timezone. We discussed this in a previous chapter, we will write all timestamps in UTC so that they are consistent. That has the undesired side effect that the time displayed in the user profile page is also in UTC. We will fix this in a future chapter that will be dedicated to date and time handling.
   </p>
   <p>
    To display the user's about me information we have to give them a place to enter it, and the proper place for this is in the edit profile page.
   </p>
   <h2>
    Editing the profile information
   </h2>
   <p>
    Adding a profile form is surprisingly easy. We start by creating the web form (file
    <code>
     app/forms.py
    </code>
    ):
   </p>
   <pre><code>from flask.ext.wtf import Form
from wtforms import StringField, BooleanField, TextAreaField
from wtforms.validators import DataRequired, Length

class EditForm(Form):
    nickname = StringField('nickname', validators=[DataRequired()])
    about_me = TextAreaField('about_me', validators=[Length(min=0, max=140)])
</code></pre>
   <p>
    Then the view template (file
    <code>
     app/templates/edit.html
    </code>
    ):
   </p>
   <pre><code>&lt;!-- extend base layout --&gt;
{% extends "base.html" %}

{% block content %}
  &lt;h1&gt;Edit Your Profile&lt;/h1&gt;
  &lt;form action="" method="post" name="edit"&gt;
      {{form.hidden_tag()}}
      &lt;table&gt;
          &lt;tr&gt;
              &lt;td&gt;Your nickname:&lt;/td&gt;
              &lt;td&gt;{{ form.nickname(size=24) }}&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
              &lt;td&gt;About yourself:&lt;/td&gt;
              &lt;td&gt;{{ form.about_me(cols=32, rows=4) }}&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
              &lt;td&gt;&lt;/td&gt;
              &lt;td&gt;&lt;input type="submit" value="Save Changes"&gt;&lt;/td&gt;
          &lt;/tr&gt;
      &lt;/table&gt;
  &lt;/form&gt;
{% endblock %}
</code></pre>
   <p>
    And finally we write the view function (file
    <code>
     app/views.py
    </code>
    ):
   </p>
   <pre><code>from forms import LoginForm, EditForm

@app.route('/edit', methods=['GET', 'POST'])
@login_required
def edit():
    form = EditForm()
    if form.validate_on_submit():
        g.user.nickname = form.nickname.data
        g.user.about_me = form.about_me.data
        db.session.add(g.user)
        db.session.commit()
        flash('Your changes have been saved.')
        return redirect(url_for('edit'))
    else:
        form.nickname.data = g.user.nickname
        form.about_me.data = g.user.about_me
    return render_template('edit.html', form=form)
</code></pre>
   <p>
    To make this page easy to reach, we also add a link to it from the user profile page (file
    <code>
     app/templates/user.html
    </code>
    ):
   </p>
   <pre><code>&lt;!-- extend base layout --&gt;
{% extends "base.html" %}

{% block content %}
  &lt;table&gt;
      &lt;tr valign="top"&gt;
          &lt;td&gt;&lt;img src="{{ user.avatar(128) }}"&gt;&lt;/td&gt;
          &lt;td&gt;
              &lt;h1&gt;User: {{user.nickname}}&lt;/h1&gt;
              {% if user.about_me %}&lt;p&gt;{{ user.about_me }}&lt;/p&gt;{% endif %}
              {% if user.last_seen %}&lt;p&gt;&lt;i&gt;Last seen on: {{ user.last_seen }}&lt;/i&gt;&lt;/p&gt;{% endif %}
              {% if user.id == g.user.id %}&lt;p&gt;&lt;a href="{{ url_for('edit') }}"&gt;Edit&lt;/a&gt;&lt;/p&gt;{% endif %}
          &lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
  &lt;hr&gt;
  {% for post in posts %}
      {% include 'post.html' %}
  {% endfor %}
{% endblock %}
</code></pre>
   <p>
    Pay attention to the clever conditional we are using to make sure that the Edit link appears when you are viewing your own profile, but not when you are viewing someone else's.
   </p>
   <p>
    Below is a new screenshot of the user profile page, with all the additions, and with some "about me" words written:
   </p>
   <p>
   </p>
   <center>
    <img alt="microblog profile page" src="images/flask-mega-tutorial-part-vi-2.png"/>
   </center>
   <h2>
    Final words... and your homework!
   </h2>
   <p>
    So it seems we are pretty much done with user profiles, right? We sort of are, but we have a nasty bug that we need to fix.
   </p>
   <p>
    Can you find it?
   </p>
   <p>
    Here is a clue. We have introduced this bug in the previous chapter of the tutorial, when we were looking at the login system. And today we have written a new piece of code that has the same bug.
   </p>
   <p>
    Think about it, and if you know what the problem is feel free to show off in the comments below. I will explain the bug, and how to fix it properly in the next chapter.
   </p>
   <p>
    As always, here is the download link for the complete application with today's additions:
   </p>
   <p>
    Download
    <a href="https://github.com/miguelgrinberg/microblog/archive/version-0.6.zip">
     microblog-0.6.zip
    </a>
    .
   </p>
   <p>
    Remember that I'm not including a database in the archive. If you have a database from the previous chapter, just put it in the correct location and then run
    <code>
     db_upgrade.py
    </code>
    to upgrade it. If you don't have a previous database then call
    <code>
     db_create.py
    </code>
    to make a brand new one.
   </p>
   <p>
    Thank you for following my tutorial. I hope to see you again in the next installment.
   </p>
   <p>
    Miguel
   </p>
  </div>
  <div class="social-bar">
   <table>
    <tr>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <a class="twitter-share-button" data-count="vertical" data-url="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-vi-profile-page-and-avatars" data-via="miguelgrinberg" href="https://twitter.com/share">
        Tweet
       </a>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-left: 6px;">
       <div class="fb-like" data-font="verdana" data-href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-vi-profile-page-and-avatars" data-layout="box_count" data-send="false" data-show-faces="false" data-width="450">
       </div>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <g:plusone href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-vi-profile-page-and-avatars" size="tall">
       </g:plusone>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <script data-counter="top" data-url="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-vi-profile-page-and-avatars" type="IN/Share">
       </script>
      </div>
     </td>
    </tr>
   </table>
  </div>
  <h4 style="text-align: right">
   <a name="comments">
   </a>
   83 comments
  </h4>
  <div class="comment">
   <ul>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/b50f24a5349355a5ce3845f2d1e1cf7e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #1
       </span>
       <span class="label label-primary">
        JonoB
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-19T21:08:07Z">
        2012-07-19T21:08:07Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Your post.html template is wrong, since you are creating a new &lt;table&gt; element for each post. Your for look should be inside the table, and inside the post.html template (not inside the user.html template)
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/b50f24a5349355a5ce3845f2d1e1cf7e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #2
       </span>
       <span class="label label-primary">
        JonoB
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-19T21:49:14Z">
        2012-07-19T21:49:14Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I thought that jinja2 templates are safe by default, and that auto-escaping happens by default. By adding the |safe method, you STOP auto-escaping for that field. See http://flask.pocoo.org/docs/templating/ : use the |safe filter to explicitly mark a string as safe HTML ({{ myvariable|safe }})
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #3
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-20T03:26:35Z">
        2012-07-20T03:26:35Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @JonoB: My intention was to create a different table per post, as that allows you to have other formatting elements or spacing between posts. The page could also very well work with a single table like you suggest. Thanks.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #4
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-20T03:28:44Z">
        2012-07-20T03:28:44Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @JonoB: absolutely right about the the "safe" qualifier. I have removed it and will find the opportunity to introduce it again in a later chapter. Thanks again for keeping me honest!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/d9d2d692aef76c4131be177b693f109f?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #5
       </span>
       <span class="label label-primary">
        <a href="http://gianpaj.com">
         GianPaJ
        </a>
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-03-26T23:46:04Z">
        2013-03-26T23:46:04Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I already have done a Flask app. But it's great to revisit the steps I did about year ago and few things I should have done better :)

Thanks so much for this tutorial!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/443f3a0d245fa5200c43182325937f2c?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #6
       </span>
       <span class="label label-primary">
        American Gaucho
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-04-21T04:12:44Z">
        2013-04-21T04:12:44Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I haven't looked at the later phases of the tutorial yet, but I'm guessing the bug has to do with the fact that we may have collisions with our OpenIDs. In fact, I would have hit this bug in my code if Yahoo presented its OpenIDs a bit differently than Google does. Whenever a collision happens between two OpenIDs, someone will simply be unable to register for our app.

I'm glad you said there was a bug, because I noticed it during the login chapter and was wondering if it would ever be fixed lol. Thanks for an awesome tutorial so far - you could easily turn this thing into a great book!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/de14f1152bd5a6e789726d196f06fcf8?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #7
       </span>
       <span class="label label-primary">
        azed
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-02T16:48:53Z">
        2013-06-02T16:48:53Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        This part of the code
if g.user.is_authenticated():
        g.user.last_seen = datetime.utcnow()
        db.session.add(g.user)
        db.session.commit()

raises  AttributeError: 'RequestContext' object has no attribute 'user'
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #8
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-02T16:54:11Z">
        2013-06-02T16:54:11Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @azed: the line right above the "if g.user.is_authenticated" sets g.user to current_user. Do you have that in your code?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/de14f1152bd5a6e789726d196f06fcf8?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #9
       </span>
       <span class="label label-primary">
        azed
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-02T19:45:54Z">
        2013-06-02T19:45:54Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Yeah i have it. This is the stack trace

File "C:\Users\NOD\microblog\flask\lib\site-packages\flask\app.py", line 1701, in __call__
return self.wsgi_app(environ, start_response)
File "C:\Users\NOD\microblog\flask\lib\site-packages\flask\app.py", line 1689, in wsgi_app
response = self.make_response(self.handle_exception(e))
File "C:\Users\NOD\microblog\flask\lib\site-packages\flask\app.py", line 1687, in wsgi_app
response = self.full_dispatch_request()
File "C:\Users\NOD\microblog\flask\lib\site-packages\flask\app.py", line 1360, in full_dispatch_request
rv = self.handle_user_exception(e)
File "C:\Users\NOD\microblog\flask\lib\site-packages\flask\app.py", line 1356, in full_dispatch_request
rv = self.preprocess_request()
File "C:\Users\NOD\microblog\flask\lib\site-packages\flask\app.py", line 1539, in preprocess_request
rv = func()
File "C:\Users\NOD\microblog\app\views.py", line 75, in before_request
if g.user.is_authenticated():
File "C:\Users\NOD\microblog\flask\lib\site-packages\werkzeug\local.py", line 336, in __getattr__
return getattr(self._get_current_object(), name)
File "C:\Users\NOD\microblog\flask\lib\site-packages\werkzeug\local.py", line 295, in _get_current_object
return self.__local()
File "C:\Users\NOD\microblog\flask\lib\site-packages\flask_login.py", line 403, in &lt;lambda&gt;
current_user = LocalProxy(lambda: _request_ctx_stack.top.user)
AttributeError: 'RequestContext' object has no attribute 'user'
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #10
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-02T20:09:36Z">
        2013-06-02T20:09:36Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @azed: I can't really confirm that g.user was set before by looking at the stack trace. I was able to reproduce your stack trace by not initializating the LoginManager class. Look in app/__init__.py  for a line that reads lm.init_app(app). Any chance you missed this?

In general when you have a problem like this you may also want to download my version of the application and try it alongside yours to see what the differences are.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/de14f1152bd5a6e789726d196f06fcf8?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #11
       </span>
       <span class="label label-primary">
        azed
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-02T20:22:40Z">
        2013-06-02T20:22:40Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I initialized the LoginManager class. I'll down load yours and try it.
Thanks for the tutorial and your time.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/de14f1152bd5a6e789726d196f06fcf8?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #12
       </span>
       <span class="label label-primary">
        azed
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-02T20:34:22Z">
        2013-06-02T20:34:22Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I have solved the issue. I moved the lm.init_app(app) 3 steps higher in my code. I figured if it was the problem when you tried to reproduce my error, then it means my app was crashing before it got to that line.

Thanks once again.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/e2f2443f92676114639b7108f7d3b91c?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #13
       </span>
       <span class="label label-primary">
        <a href="https://github.com/saurshaz">
         saurshaz
        </a>
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-07-13T05:22:50Z">
        2013-07-13T05:22:50Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel -

Thanks a lot for this series .. Learning a lot. My python experience is beginner level. But I am pretty experienced in JS and java based  web development

One issue i see is that in case of form errors, the edit form loses the changed values(which contain the error) 

for ex- a text section for about_me containing more than 140 characters. DO you have a way to solve that problem.

Thanks again
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #14
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-07-14T05:43:18Z">
        2013-07-14T05:43:18Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @saurshaz: I'm not sure I understand what you mean. WTForms makes sure values for form fields are remembered, are your fields going back to blank when there is an error?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/bfc7af326f115bbf28e3159b776b06c2?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #15
       </span>
       <span class="label label-primary">
        Stefan
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-08-29T07:08:10Z">
        2013-08-29T07:08:10Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I had to change:
from flask.ext.wtf import Form, TextField, BooleanField, TextAreaField
from flask.ext.wtf import Required, Length
to:
from flask.ext.wtf import Form
from wtforms import TextField, BooleanField, TextAreaField
from wtforms.validators import Required, Length

I think this may be related to a known issue with Flask.ext?! (I am on Windows in case that matters)
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/59969290a7f5e243ed607b67a56339ce?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #16
       </span>
       <span class="label label-primary">
        wang long
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-09-01T14:10:30Z">
        2013-09-01T14:10:30Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Last seen on: 2013-09-01 14:07:06.775599

in app/views.py, the datetime format is wrong.
def before_request():
    g.user = current_user
    if g.user.is_authenticated():
        g.user.last_seen = datetime.utcnow()
        db.session.add(g.user)
        db.session.commit()
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/273bff9780dd8547ecfc9fa382078e5a?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #17
       </span>
       <span class="label label-primary">
        Liam
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-09-08T05:57:07Z">
        2013-09-08T05:57:07Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Trying to nut this out - my Edit page loads with heading 'Edit Your Profile' but there's nothing underneath. So far the code looks the same. Any ideas?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #18
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-09-08T06:11:22Z">
        2013-09-08T06:11:22Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Liam: Did you check the edit.html template? Try replacing your version with mine from github.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/73707813822fee52c8540b50c0aed478?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #19
       </span>
       <span class="label label-primary">
        <a href="yifanwu.net">
         Yifan Wu
        </a>
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-10-17T12:21:47Z">
        2013-10-17T12:21:47Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel, I was implementing a slightly more complex profile with a few dropdown options for birth year (etc). I was wondering if there is a way for Flask to remember the saved selection from what's stored on the user profile (as opposed to defaulting to the top on the choices list for the selection). Thanks so much and looking forward to your book.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #20
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-10-17T14:15:25Z">
        2013-10-17T14:15:25Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Yifan: Yes, you can set any form field to the value of your choice by setting "form.field-name.data" to that value before displaying the form.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/d9c7dc2eb31487a54cd3d2737c1147dc?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #21
       </span>
       <span class="label label-primary">
        Siyuan
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-11-04T08:07:37Z">
        2013-11-04T08:07:37Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I think the bug is missing the csrf token. Since I type in words in "about me" text area, it can not be saved. The form.validate_on_sutmit() return False. Then I print out form.errors and get the "CSRF token missing" message.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/d9c7dc2eb31487a54cd3d2737c1147dc?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #22
       </span>
       <span class="label label-primary">
        Siyuan
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-11-04T08:12:38Z">
        2013-11-04T08:12:38Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Oh, that's my fault. I just missing it in my edit.html.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/8bdc16a462a5bb88c8986e7bd193078d?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #23
       </span>
       <span class="label label-primary">
        Rich
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-11-26T00:19:43Z">
        2013-11-26T00:19:43Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        In part 3, we imported TextField, BooleanField and Required from wtforms and wtforms.validators.  In this part, we changed to importing them from flask.ext.wtf.  Is this importing the exact same classes because of an inheritance hierarchy, or are they different classes with more/less/different functionality?  Not a big deal, but would appreciate an explanation of the change.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #24
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-11-26T05:16:47Z">
        2013-11-26T05:16:47Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Rich: my bad. In an older release of Flask-WTF you had to import everything from flask.ext.wtf. Current releases stopped supporting that and now only Form comes from flask.ext.wtf, while everything else is imported straight from wtforms. I updated Part 3 with this change but missed Part 4. This is now corrected.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/54119c4bebf21ab604db4a985e503606?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #25
       </span>
       <span class="label label-primary">
        Samuel
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-11-29T13:52:57Z">
        2013-11-29T13:52:57Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel, thanks for your tutorial. Till this moment i had not problems with app, but now im facing one.
What could be wrong with saving about_me information. Each time i hit 'save changes' after editing, it does nothing. It does not save anything. It just creates a new object in memory from, i can see it from 'hidden_tag' info, first hit:
&lt;bound method EditForm.hidden_tag of &lt;app.forms.EditForm object at 0x7f9c9813f410&gt;&gt;
Second hit:
&lt;bound method EditForm.hidden_tag of &lt;app.forms.EditForm object at 0x7f9c98146290&gt;&gt;
In my opinion it might be that my environment set up wrong, it has to deal something with database, but it still does save my last session time though.
       </p>
      </div>
     </div>
    </li>
   </ul>
  </div>
  <div class="page">
   <ul class="pager">
    <li class="previous disabled">
     <a href="#">
      ««
     </a>
    </li>
    <li class="previous disabled">
     <a href="#">
      «
     </a>
    </li>
    <li class="next">
     <a href="/post/the-flask-mega-tutorial-part-vi-profile-page-and-avatars/page/0#comments">
      »»
     </a>
    </li>
    <li class="next">
     <a href="/post/the-flask-mega-tutorial-part-vi-profile-page-and-avatars/page/2#comments">
      »
     </a>
    </li>
   </ul>
  </div>
  <h3>
   <a name="commentform">
   </a>
   Leave a Comment
  </h3>
  <form action="#commentform" class="form" method="post" role="form">
   <div style="display:none;">
    <input id="csrf_token" name="csrf_token" type="hidden" value="1452908216.67##35e6b9cc803d1054b0c661411d3e482d653d90a4"/>
   </div>
   <div class="form-group ">
    <label class="control-label" for="name">
     Name
    </label>
    <input class="form-control" id="name" name="name" required="" type="text" value=""/>
   </div>
   <div class="form-group ">
    <label class="control-label" for="url">
     URL
    </label>
    <input class="form-control" id="url" name="url" type="text" value=""/>
   </div>
   <div class="form-group ">
    <label class="control-label" for="email">
     Email
    </label>
    <input class="form-control" id="email" name="email" required="" type="text" value=""/>
   </div>
   <div class="form-group ">
    <label class="control-label" for="comment">
     Comment
    </label>
    <textarea class="form-control" id="comment" name="comment" required="">
    </textarea>
   </div>
   <div class="form-group ">
    <label class="control-label" for="captcha">
     Captcha
    </label>
    <script type="text/javascript">
     var RecaptchaOptions = {"custom_translations": {"audio_challenge": "Get an audio challenge", "cant_hear_this": "Download sound as MP3", "help_btn": "Help", "image_alt_text": "reCAPTCHA challenge image", "incorrect_try_again": "Incorrect. Try again.", "instructions_audio": "Type what you hear", "instructions_visual": "Type the text", "play_again": "Play sound again", "privacy_and_terms": "Privacy & Terms", "refresh_btn": "Get a new challenge", "visual_challenge": "Get a visual challenge"}, "theme": "white"};
    </script>
    <script src="//www.google.com/recaptcha/api/challenge?k=6Ld5Zs4SAAAAAOY0DOi4r18bgHlEaz41qAoRf__S" type="text/javascript">
    </script>
    <noscript>
     <iframe frameborder="0" height="300" src="//www.google.com/recaptcha/api/noscript?k=6Ld5Zs4SAAAAAOY0DOi4r18bgHlEaz41qAoRf__S" width="500">
     </iframe>
     <br/>
     <textarea cols="40" name="recaptcha_challenge_field" rows="3">
     </textarea>
     <input name="recaptcha_response_field" type="hidden" value="manual_challenge"/>
    </noscript>
   </div>
   <input class="btn btn-default" id="submit" name="submit" type="submit" value="Submit"/>
  </form>
 </div>
</div>

    </html>
    