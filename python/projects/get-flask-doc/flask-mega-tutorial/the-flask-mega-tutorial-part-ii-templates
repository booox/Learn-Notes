
    <!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>The Flask Mega-Tutorial</title>
    <link href="style.css" rel="stylesheet" type="text/css" />
    </head>
    <div id="main">
 <div class="post">
  <p class="date">
   <span class="flask-moment" data-format="format('LL')" data-refresh="0" data-timestamp="2012-05-09T05:26:06Z">
    2012-05-09T05:26:06Z
   </span>
  </p>
  <h1 class="post-title">
   <a href="/post/the-flask-mega-tutorial-part-ii-templates">
    The Flask Mega-Tutorial, Part II: Templates
   </a>
  </h1>
  <div class="post_body">
   <p>
    This is the second article in the series where I document my experience writing web applications in
    <a href="http://python.org">
     Python
    </a>
    using the
    <a href="http://flask.pocoo.org">
     Flask
    </a>
    microframework.
   </p>
   <p>
    The goal of the tutorial series is to develop a decently featured microblogging application that demonstrating total lack of originality I have decided to call
    <code>
     microblog
    </code>
    .
   </p>
   <p>
    <strong>
     NOTE
    </strong>
    : This article was revised in September 2014 to be in sync with current versions of Python and Flask.
   </p>
   <p>
    Here is an index of all the articles in the series that have been published to date:
   </p>
   <ul>
    <li>
     <a href="the-flask-mega-tutorial-part-i-hello-world">
      Part I: Hello, World!
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-ii-templates">
      Part II: Templates
     </a>
     (this article)
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-iii-web-forms">
      Part III: Web Forms
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-iv-database">
      Part IV: Database
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-v-user-logins">
      Part V: User Logins
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-vi-profile-page-and-avatars">
      Part VI: Profile Page And Avatars
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-vii-unit-testing">
      Part VII: Unit Testing
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-viii-followers-contacts-and-friends">
      Part VIII: Followers, Contacts And Friends
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-ix-pagination">
      Part IX: Pagination
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-x-full-text-search">
      Part X: Full Text Search
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xi-email-support">
      Part XI: Email Support
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xii-facelift">
      Part XII: Facelift
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xiii-dates-and-times">
      Part XIII: Dates and Times
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xiv-i18n-and-l10n">
      Part XIV: I18n and L10n
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xv-ajax">
      Part XV: Ajax
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xvi-debugging-testing-and-profiling">
      Part XVI: Debugging, Testing and Profiling
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi">
      Part XVII: Deployment on Linux (even on the Raspberry Pi!)
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud">
      Part XVIII: Deployment on the Heroku Cloud
     </a>
    </li>
   </ul>
   <h2>
    Recap
   </h2>
   <p>
    If you followed the
    <a href="/post/the-flask-mega-tutorial-part-i-hello-world">
     previous chapter
    </a>
    you should have a fully working, yet very simple web application that has the following file structure:
   </p>
   <pre><code>    microblog\
      flask\
        &lt;virtual environment files&gt;
      app\
        static\
        templates\
        __init__.py
        views.py
      tmp\
      run.py
</code></pre>
   <p>
    To run the application you execute the
    <code>
     run.py
    </code>
    script and then open the
    <code>
     http://localhost:5000
    </code>
    URL on your web browser.
   </p>
   <p>
    We are picking up exactly from where we left off, so you may want to make sure you have the above application correctly installed and working.
   </p>
   <h2>
    Why we need templates
   </h2>
   <p>
    Let's consider how we can expand our little application.
   </p>
   <p>
    We want the home page of our microblogging app to have a heading that welcomes the logged in user, that's pretty standard for applications of this kind. Ignore for now the fact that we have no way to log a user in, I'll present a workaround for this issue in a moment.
   </p>
   <p>
    An easy option to output a nice and big heading would be to change our view function to output HTML, maybe something like this:
   </p>
   <pre><code>from app import app

@app.route('/')
@app.route('/index')
def index():
    user = {'nickname': 'Miguel'}  # fake user
    return '''
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Home Page&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello, ''' + user['nickname'] + '''&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
'''
</code></pre>
   <p>
    Give the application a try to see how this looks in your browser.
   </p>
   <p>
    Since we don't have support for users yet I have resorted to using a placeholder user object, sometimes called fake or mock object. This allows us to concentrate on certain aspects of our application that depend on parts of the system that haven't been built yet.
   </p>
   <p>
    I hope you agree with me that the solution used above to deliver HTML to the browser is very ugly. Consider how complex the code will become if you have to return a large and complex HTML page with lots of dynamic content. And what if you need to change the layout of your web site in a large app that has dozens of views, each returning HTML directly? This is clearly not a scalable option.
   </p>
   <h2>
    Templates to the rescue
   </h2>
   <p>
    If you could keep the logic of your application separate from the layout or presentation of your web pages things would be much better organized, don't you think? You could even hire a web designer to create a killer web site while you code the site's behaviors in Python. Templates help implement this separation.
   </p>
   <p>
    Let's write our first template (file
    <code>
     app/templates/index.html
    </code>
    ):
   </p>
   <pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;{{ title }} - microblog&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
      &lt;h1&gt;Hello, {{ user.nickname }}!&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
   <p>
    As you see above, we just wrote a mostly standard HTML page, with the only difference that there are some placeholders for the dynamic content enclosed in
    <code>
     {{ ... }}
    </code>
    sections.
   </p>
   <p>
    Now let's see how we use this template from our view function (file
    <code>
     app/views.py
    </code>
    ):
   </p>
   <pre><code>from flask import render_template
from app import app

@app.route('/')
@app.route('/index')
def index():
    user = {'nickname': 'Miguel'}  # fake user
    return render_template('index.html',
                           title='Home',
                           user=user)
</code></pre>
   <p>
    Try the application at this point to see how the template works. Once you have the rendered page in your browser you may want to view the source HTML and compare it against the original template.
   </p>
   <p>
    To render the template we had to import a new function from the Flask framework called
    <code>
     render_template
    </code>
    . This function takes a template filename and a variable list of template arguments and returns the rendered template, with all the arguments replaced.
   </p>
   <p>
    Under the covers, the
    <code>
     render_template
    </code>
    function invokes the
    <a href="http://jinja.pocoo.org">
     Jinja2
    </a>
    templating engine that is part of the Flask framework. Jinja2 substitutes
    <code>
     {{...}}
    </code>
    blocks with the corresponding values provided as template arguments.
   </p>
   <h2>
    Control statements in templates
   </h2>
   <p>
    The Jinja2 templates also support control statements, given inside
    <code>
     {%...%}
    </code>
    blocks. Let's add an if statement to our template (file
    <code>
     app/templates/index.html
    </code>
    ):
   </p>
   <pre><code>&lt;html&gt;
  &lt;head&gt;
    {% if title %}
    &lt;title&gt;{{ title }} - microblog&lt;/title&gt;
    {% else %}
    &lt;title&gt;Welcome to microblog&lt;/title&gt;
    {% endif %}
  &lt;/head&gt;
  &lt;body&gt;
      &lt;h1&gt;Hello, {{ user.nickname }}!&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
   <p>
    Now our template is a bit smarter. If the view function forgets to define a page title then instead of showing an empty title the template will provide its own title. Feel free to remove the
    <code>
     title
    </code>
    argument in the
    <code>
     render_template
    </code>
    call of our view function to see how the conditional statement works.
   </p>
   <h2>
    Loops in templates
   </h2>
   <p>
    The logged in user in our
    <code>
     microblog
    </code>
    application will probably want to see recent posts from followed users in the home page, so let's see how we can do that.
   </p>
   <p>
    To begin, we use our handy fake object trick to create some users and some posts to show (file
    <code>
     app/views.py
    </code>
    ):
   </p>
   <pre><code>def index():
    user = {'nickname': 'Miguel'}  # fake user
    posts = [  # fake array of posts
        { 
            'author': {'nickname': 'John'}, 
            'body': 'Beautiful day in Portland!' 
        },
        { 
            'author': {'nickname': 'Susan'}, 
            'body': 'The Avengers movie was so cool!' 
        }
    ]
    return render_template("index.html",
                           title='Home',
                           user=user,
                           posts=posts)
</code></pre>
   <p>
    To represent user posts we are using a list, where each element has
    <code>
     author
    </code>
    and
    <code>
     body
    </code>
    fields. When we get to implement a real database we will preserve these field names, so we can design and test our template using the fake objects without having to worry about updating it when we move to a database.
   </p>
   <p>
    On the template side we have to solve a new problem. The list can have any number of elements, it will be up to the view function to decide how many posts need to be presented. The template cannot make any assumptions about the number of posts, so it needs to be prepared to render as many posts as the view sends.
   </p>
   <p>
    So let's see how we do this using a
    <code>
     for
    </code>
    control structure (file
    <code>
     app/templates/index.html
    </code>
    ):
   </p>
   <pre><code>&lt;html&gt;
  &lt;head&gt;
    {% if title %}
    &lt;title&gt;{{ title }} - microblog&lt;/title&gt;
    {% else %}
    &lt;title&gt;Welcome to microblog&lt;/title&gt;
    {% endif %}
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Hi, {{ user.nickname }}!&lt;/h1&gt;
    {% for post in posts %}
    &lt;div&gt;&lt;p&gt;{{ post.author.nickname }} says: &lt;b&gt;{{ post.body }}&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;
    {% endfor %}
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
   <p>
    Simple, right? Give it a try, and be sure to play with adding more content to the posts array.
   </p>
   <h2>
    Template inheritance
   </h2>
   <p>
    We have one more topic to cover before we close for the day.
   </p>
   <p>
    Our
    <code>
     microblog
    </code>
    web application will need to have a navigation bar at the top of the page with a few links. Here you will get the link to edit your profile, to login, logout, etc.
   </p>
   <p>
    We can add a navigation bar to our
    <code>
     index.html
    </code>
    template, but as our application grows we will be needing to implement more pages, and this navigation bar will have to be copied to all of them. Then you will have to keep all these identical copies of the navigation bar in sync, and that could become a lot of work if you have a lot of pages and templates.
   </p>
   <p>
    Instead, we can use Jinja2's template inheritance feature, which allows us to move the parts of the page layout that are common to all templates and put them in a base template from which all other templates are derived.
   </p>
   <p>
    So let's define a base template that includes the navigation bar and also the bit of title logic we implemented earlier (file
    <code>
     app/templates/base.html
    </code>
    ):
   </p>
   <pre><code>&lt;html&gt;
  &lt;head&gt;
    {% if title %}
    &lt;title&gt;{{ title }} - microblog&lt;/title&gt;
    {% else %}
    &lt;title&gt;Welcome to microblog&lt;/title&gt;
    {% endif %}
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;Microblog: &lt;a href="/index"&gt;Home&lt;/a&gt;&lt;/div&gt;
    &lt;hr&gt;
    {% block content %}{% endblock %}
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
   <p>
    In this template we use the
    <code>
     block
    </code>
    control statement to define the place where the derived templates can insert themselves. Blocks are given a unique name, and their content can be replaced or enhanced in derived templates.
   </p>
   <p>
    And now what's left is to modify our
    <code>
     index.html
    </code>
    template to
    <em>
     inherit
    </em>
    from
    <code>
     base.html
    </code>
    (file
    <code>
     app/templates/index.html
    </code>
    ):
   </p>
   <pre><code>{% extends "base.html" %}
{% block content %}
    &lt;h1&gt;Hi, {{ user.nickname }}!&lt;/h1&gt;
    {% for post in posts %}
    &lt;div&gt;&lt;p&gt;{{ post.author.nickname }} says: &lt;b&gt;{{ post.body }}&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;
    {% endfor %}
{% endblock %}
</code></pre>
   <p>
    Since the
    <code>
     base.html
    </code>
    template will now take care of the general page structure we have removed those elements from this one and left only the content part. The
    <code>
     extends
    </code>
    block establishes the inheritance link between the two templates, so that Jinja2 knows that when it needs to render
    <code>
     index.html
    </code>
    it needs to include it inside
    <code>
     base.html
    </code>
    . The two templates have matching
    <code>
     block
    </code>
    statements with name
    <code>
     content
    </code>
    , and this is how Jinja2 knows how to combine the two into one. When we get to write new templates we will also create them as extensions to
    <code>
     base.html
    </code>
    .
   </p>
   <h2>
    Final words
   </h2>
   <p>
    If you want to save time, the
    <code>
     microblog
    </code>
    application in its current state is available here:
   </p>
   <p>
    Download
    <a href="https://github.com/miguelgrinberg/microblog/archive/version-0.2.zip">
     microblog-0.2.zip
    </a>
    .
   </p>
   <p>
    Note that the zip file does not include the flask virtual environment, you will need to create it following the instructions in the first chapter in the series before you can run the application.
   </p>
   <p>
    If you have any questions or comments feel free to leave them below.
   </p>
   <p>
    In the next chapter of the series we will be looking at web forms. I hope to see you then.
   </p>
   <p>
    Miguel
   </p>
  </div>
  <div class="social-bar">
   <table>
    <tr>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <a class="twitter-share-button" data-count="vertical" data-url="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-ii-templates" data-via="miguelgrinberg" href="https://twitter.com/share">
        Tweet
       </a>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-left: 6px;">
       <div class="fb-like" data-font="verdana" data-href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-ii-templates" data-layout="box_count" data-send="false" data-show-faces="false" data-width="450">
       </div>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <g:plusone href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-ii-templates" size="tall">
       </g:plusone>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <script data-counter="top" data-url="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-ii-templates" type="IN/Share">
       </script>
      </div>
     </td>
    </tr>
   </table>
  </div>
  <h4 style="text-align: right">
   <a name="comments">
   </a>
   45 comments
  </h4>
  <div class="comment">
   <ul>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/44e58bb56ca27d4ca4f34ed3ad819c1e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #1
       </span>
       <span class="label label-primary">
        Bob
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-05-09T07:12:01Z">
        2012-05-09T07:12:01Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I don't have anything templatized under index.html, but I do have templatized code under some javascripts that gets included under &lt;head&gt; of index.html.  How do I render_template on these javascripts have index.html read them?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #2
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-05-09T16:35:50Z">
        2012-05-09T16:35:50Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        You can easily work with javascript templates. Just put your javascript file in the app's template directory and add your template substitutions like you would on an HTML file. Then create a view function that renders this template. The view will be associated with a route, like a regular html based view. Finally, in the script tag that imports this javascript set the src argument to the javascript route instead of using a static javascript filename. I hope this helps!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/44e58bb56ca27d4ca4f34ed3ad819c1e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #3
       </span>
       <span class="label label-primary">
        Bob
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-05-11T23:52:08Z">
        2012-05-11T23:52:08Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        This helps, but I'm totally new to Flask.  A short extension to the current tutorial would definitely help, both me and other.

Thanks
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #4
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-05-12T02:36:20Z">
        2012-05-12T02:36:20Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Well, the thing is I'm not really sure there is a good reason to use javascript templates, and that doesn't really fit well with this tutorial. It seems to me you could move the dynamic sections of your javascript to the parent HTML and then pass these as arguments to javascript functions.
But in any case, if you ask this question in stackoverflow.com and send me the link I'll be happy to go into more detail regarding how to implement it.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/27445addce189d9edb3f3d48823f525f?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #5
       </span>
       <span class="label label-primary">
        Catherine Penfold
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-10-29T17:57:48Z">
        2012-10-29T17:57:48Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel,
I have changed the &lt;title&gt; tags to &lt;h1&gt; as they don't seem to work. Is this a browser issue?
Thanks
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #6
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-10-29T18:13:58Z">
        2012-10-29T18:13:58Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Catherine, the &lt;title&gt; tags work on all browsers. What is it that you think doesn't work? Browsers typically show the page title in the window's title bar, this is not part of the page.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/27445addce189d9edb3f3d48823f525f?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #7
       </span>
       <span class="label label-primary">
        Catherine Penfold
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-10-29T19:18:07Z">
        2012-10-29T19:18:07Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel, 
Ah yes, I see it now. Did you have any suggestions re the flask-wtf?
thanks
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/27445addce189d9edb3f3d48823f525f?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #8
       </span>
       <span class="label label-primary">
        Catherine
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-10-29T19:20:34Z">
        2012-10-29T19:20:34Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Oh, and I worked out the issue with the ./run.py not working, it's because you need to change the file permissions (chmod 755) - you might want to add that to your tutorial
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #9
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-10-29T23:59:36Z">
        2012-10-29T23:59:36Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I have added the chmod step for the run.py script, I've missed that. As far as the flask-wtf I don't know. You should not need to move anything, the pip installer should be putting everything in the right location. If you are invoking the Python interpreter from the virtual environment (by having the shebang line point to flask/bin/python) then all the installed modules should be reachable.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/0fc07b61106081afcff3bcea3121a5a5?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #10
       </span>
       <span class="label label-primary">
        Anthony
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-03-05T11:36:29Z">
        2013-03-05T11:36:29Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Thanks for the tutorial series.  I was a web developer in PHP/ASP a long time past, and I've been trying to get back into it for a project.  It's been difficult jumping back in when so much has changed (yay, standards!  yay, css3!).

This is slowly getting me back on the path to production.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/e27a92df580faf53bd7a8c200eb0829b?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #11
       </span>
       <span class="label label-primary">
        Tony
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-03-24T03:14:17Z">
        2013-03-24T03:14:17Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Miguel, I think you should continue to polish this and self-publish a book or get together with O'Reilly, O'rly or whatever and make a book on this.

Perhaps make a github / sphinx release of your tutorial so it's not stuck on a blog. Thanks for this.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/b4709a38e1df6f50c52cfcd9627134a0?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #12
       </span>
       <span class="label label-primary">
        <a href="http://joshtaylor.id.au">
         Josh
        </a>
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-03-25T08:00:53Z">
        2013-03-25T08:00:53Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        It's awesome how close jinja2 is to twig.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/b6f2be3eeaac4ca85fe421fb9e0fb185?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #13
       </span>
       <span class="label label-primary">
        Emily
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-26T14:01:06Z">
        2013-06-26T14:01:06Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I am new to flask and am finding these posts very informative and interesting! I have a quick question about the if statements in flask. In python elif is supported, can this also be used in flask or should nested if statements be used to accomplished this?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #14
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-27T04:42:52Z">
        2013-06-27T04:42:52Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Emily: you can certainly use elif, Flask does not restrict the language at all.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/c90b2bdef6a66fc6b95c9940ae7f8544?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #15
       </span>
       <span class="label label-primary">
        Bruce
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-29T11:32:12Z">
        2013-06-29T11:32:12Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Just wanted to say I wanted to learn Flask, and your tutorials are really helping. All the examples worked first time for me too. On to part 3!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/6da4d9ca44d0ee77d2c5d0cd78b55037?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #16
       </span>
       <span class="label label-primary">
        daleng
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-07-07T07:20:52Z">
        2013-07-07T07:20:52Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Miguel ，thanks a lot,I'm a chinese newr to flask,my English is so poor that "pocoo.org"'s document is too hard for me.But I think I can understand your words.Thank you again!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/6be8a8215f7393dd1881d12da3edfa01?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #17
       </span>
       <span class="label label-primary">
        Scott Robinett
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-10-27T14:25:14Z">
        2013-10-27T14:25:14Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Miquel, I have been looking at Mako templates and see that you can "include" a template, as well as utilize 'def' within a template.  I realize this is a different approach, but do you believe Mako is a better solution overall?

I have programmed with coldfusion for many years and trying to stretch myself a bit.  I love the tutorials and I think I'm catching on, but have always struggled with the separation of logic.  

thanks again, I'm looking forward to the book.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #18
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-10-27T17:16:58Z">
        2013-10-27T17:16:58Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Scott: Separation of logic is a key concept. You don't want logic in your templates, and you don't want HTML stuff in your view functions. You can achieve this separation with both template engines, so in my view the choice is more about the syntax than the features of each engine. Also note that Jinja2 is well integrated with Flask, where "current_app", "request" and others are made available to templates automatically. If you go with Mako you will need to write some of that integration yourself.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/e47baf306205827fa00a051b6e69574d?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #19
       </span>
       <span class="label label-primary">
        PeterD
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-11-23T21:55:26Z">
        2013-11-23T21:55:26Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Miguel, One good learning tool for everyone is scatter instructions in your tutorials to have the readers use their web brower's "view source" menu option so they can see how the template engine has been combining  templates and inserting variable values into the final output html that is delivered to client web browser.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/542b74d6483bf1d4569abdfde1390d2e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #20
       </span>
       <span class="label label-primary">
        David Branner
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-12-19T00:34:57Z">
        2013-12-19T00:34:57Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Typo: "we use of our" =&gt; "we use our"
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/d0fe24236714a084ca90a7124a846b43?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #21
       </span>
       <span class="label label-primary">
        Gery
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2014-04-20T08:30:20Z">
        2014-04-20T08:30:20Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        g-e-n-i-u-s
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/78fa98ce000becaf5d90013164232d7b?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #22
       </span>
       <span class="label label-primary">
        Manish T
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2014-06-05T14:42:52Z">
        2014-06-05T14:42:52Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi, I am getting this error:

manish@debian:~/Desktop/microblog$ ./run.py
 * Running on http://127.0.0.1:5000/
Traceback (most recent call last):
  File "./run.py", line 3, in &lt;module&gt;
    app.run(debug = True)
  File "/home/manish/Desktop/microblog/flask/local/lib/python2.7/site-packages/flask/app.py", line 739, in run
    run_simple(host, port, self, **options)
  File "/home/manish/Desktop/microblog/flask/local/lib/python2.7/site-packages/werkzeug/serving.py", line 706, in run_simple
    test_socket.bind((hostname, port))
  File "/usr/lib/python2.7/socket.py", line 224, in meth
    return getattr(self._sock,name)(*args)
socket.error: [Errno 98] Address already in use
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #23
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2014-06-06T06:16:58Z">
        2014-06-06T06:16:58Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Manish: you have two instances of the same application, or two different applications trying to use the same port for the server.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/484b073535f15f2fe531d4dbe31a48de?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #24
       </span>
       <span class="label label-primary">
        James
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2014-06-20T15:16:28Z">
        2014-06-20T15:16:28Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel,

I followed your tutorial for creating a template, but when I launch the app it says template not found. In views I have, render_template(~/tempaltes/index.html), running python 2.7 on ubuntu.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #25
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2014-06-20T16:51:18Z">
        2014-06-20T16:51:18Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @James: try putting the templates in a "templates" folder next to your main script, then pass "index.html" to render_template.
       </p>
      </div>
     </div>
    </li>
   </ul>
  </div>
  <div class="page">
   <ul class="pager">
    <li class="previous disabled">
     <a href="#">
      ««
     </a>
    </li>
    <li class="previous disabled">
     <a href="#">
      «
     </a>
    </li>
    <li class="next">
     <a href="/post/the-flask-mega-tutorial-part-ii-templates/page/0#comments">
      »»
     </a>
    </li>
    <li class="next">
     <a href="/post/the-flask-mega-tutorial-part-ii-templates/page/2#comments">
      »
     </a>
    </li>
   </ul>
  </div>
 </div>
</div>

    </html>
    