
    <!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>The Flask Mega-Tutorial</title>
    <link href="style.css" rel="stylesheet" type="text/css" />
    </head>
    <div id="main">
 <div class="post">
  <p class="date">
   <span class="flask-moment" data-format="format('LL')" data-refresh="0" data-timestamp="2012-06-09T06:44:24Z">
    2012-06-09T06:44:24Z
   </span>
  </p>
  <h1 class="post-title">
   <a href="/post/the-flask-mega-tutorial-part-v-user-logins">
    The Flask Mega-Tutorial, Part V: User Logins
   </a>
  </h1>
  <div class="post_body">
   <p>
    This is the fifth article in the series in which I document my experience writing web applications in
    <a href="http://python.org">
     Python
    </a>
    using the
    <a href="http://flask.pocoo.org">
     Flask
    </a>
    microframework.
   </p>
   <p>
    The goal of the tutorial series is to develop a decently featured microblogging application that demonstrating total lack of originality I have decided to call
    <code>
     microblog
    </code>
    .
   </p>
   <p>
    <strong>
     NOTE
    </strong>
    : This article was revised in September 2014 to be in sync with current versions of Python and Flask.
   </p>
   <p>
    Here is an index of all the articles in the series that have been published to date:
   </p>
   <ul>
    <li>
     <a href="the-flask-mega-tutorial-part-i-hello-world">
      Part I: Hello, World!
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-ii-templates">
      Part II: Templates
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-iii-web-forms">
      Part III: Web Forms
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-iv-database">
      Part IV: Database
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-v-user-logins">
      Part V: User Logins
     </a>
     (this article)
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-vi-profile-page-and-avatars">
      Part VI: Profile Page And Avatars
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-vii-unit-testing">
      Part VII: Unit Testing
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-viii-followers-contacts-and-friends">
      Part VIII: Followers, Contacts And Friends
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-ix-pagination">
      Part IX: Pagination
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-x-full-text-search">
      Part X: Full Text Search
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xi-email-support">
      Part XI: Email Support
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xii-facelift">
      Part XII: Facelift
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xiii-dates-and-times">
      Part XIII: Dates and Times
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xiv-i18n-and-l10n">
      Part XIV: I18n and L10n
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xv-ajax">
      Part XV: Ajax
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xvi-debugging-testing-and-profiling">
      Part XVI: Debugging, Testing and Profiling
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi">
      Part XVII: Deployment on Linux (even on the Raspberry Pi!)
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud">
      Part XVIII: Deployment on the Heroku Cloud
     </a>
    </li>
   </ul>
   <h2>
    Recap
   </h2>
   <p>
    In the previous chapter of the series we created our database and learned how to populate it with users and posts, but we haven't hooked up any of that into our app yet. And two chapters ago we've seen how to create web forms and left with a fully implemented login form.
   </p>
   <p>
    In this article we are going to build on what we learned about web forms and databases and write our user login system. At the end of this tutorial our little application will register new users and log them in and out.
   </p>
   <p>
    To follow this chapter along you need to have the
    <code>
     microblog
    </code>
    app as we left it at the end of the previous chapter. Please make sure the app is installed and running.
   </p>
   <h2>
    An Update Regarding the State of OpenID
   </h2>
   <p>
    It's been more than three years ago that I wrote this article. Back then OpenID seemed like a nice authentication method that was gaining a lot of traction, but in 2015 there are better alternatives, and OpenID is not as widely deployed as it used to be.
   </p>
   <p>
    I do not have plans to update this tutorial in the near future, as I have written extensively about other authentication methods elsewhere. When you follow this tutorial keep in mind that Google, which was the most prominent OpenID provider in 2012, has dropped support for this protocol completely. My recommendation is to use a Yahoo account to test OpenID in this tutorial. I have a few personal projects that still use OpenID and I use Yahoo as a provider with good results.
   </p>
   <p>
    As far as real-world authentication, I do not think it is a good idea to use OpenID, given the lack of support. I have a few resources for you that can help you create a more modern authentication experience:
   </p>
   <ul>
    <li>
     My
     <a href="http://flaskbook.com">
      Flask book
     </a>
     covers a traditional username and password implementation, complete with user registration, password reminders and resets.
    </li>
    <li>
     My
     <a href="http://blog.miguelgrinberg.com/post/oauth-authentication-with-flask">
      OAuth Authentication with Flask
     </a>
     blog article describes in detail how to implement OAuth authentication, which has much wider support than OpenID. With this method you can implement "Login with Facebook" type functionality. The article demonstrates how to login with Facebook and Twitter. Others, such as Google, LinkedIn, etc. can be implemented easily with the same technique.
    </li>
   </ul>
   <h2>
    Configuration
   </h2>
   <p>
    As in previous chapters, we start by configuring the Flask extensions that we will use. For the login system we will use two extensions, Flask-Login and Flask-OpenID. Flask-Login will handle our users logged in state, while Flask-OpenID will provide authentication. These extensions are configured as follows (file
    <code>
     app/__init__.py
    </code>
    ):
   </p>
   <pre><code>import os
from flask.ext.login import LoginManager
from flask.ext.openid import OpenID
from config import basedir

lm = LoginManager()
lm.init_app(app)
oid = OpenID(app, os.path.join(basedir, 'tmp'))
</code></pre>
   <p>
    The Flask-OpenID extension requires a path to a temp folder where files can be stored. For this we provide the location of our
    <code>
     tmp
    </code>
    folder.
   </p>
   <h2>
    Python 3 Compatiblity
   </h2>
   <p>
    Unfortunately version 1.2.1 of Flask-OpenID (the current official version) does not work well with Python 3. Check what version you have by running the following command:
   </p>
   <pre><code>$ flask/bin/pip freeze
</code></pre>
   <p>
    If you have a version newer than 1.2.1 then the problem is likely resolved, but if you have 1.2.1 and are following this tutorial on Python 3 then you have to install the development version from GitHub:
   </p>
   <pre><code>$ flask/bin/pip uninstall flask-openid
$ flask/bin/pip install git+git://github.com/mitsuhiko/flask-openid.git
</code></pre>
   <p>
    Note that you need to have
    <code>
     git
    </code>
    installed for this to work.
   </p>
   <h2>
    Revisiting our User model
   </h2>
   <p>
    The Flask-Login extension expects certain properties and methods to be implemented in our
    <code>
     User
    </code>
    class. Outside of these there are no requirements for how the class has to be implemented.
   </p>
   <p>
    Below is our Flask-Login friendly
    <code>
     User
    </code>
    class (file
    <code>
     app/models.py
    </code>
    ):
   </p>
   <pre><code>class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nickname = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    posts = db.relationship('Post', backref='author', lazy='dynamic')

    @property
    def is_authenticated(self):
        return True

    @property
    def is_active(self):
        return True

    @property
    def is_anonymous(self):
        return False

    def get_id(self):
        try:
            return unicode(self.id)  # python 2
        except NameError:
            return str(self.id)  # python 3

    def __repr__(self):
        return '&lt;User %r&gt;' % (self.nickname)
</code></pre>
   <p>
    The
    <code>
     is_authenticated
    </code>
    property has a misleading name. In general this method should just return
    <code>
     True
    </code>
    unless the object represents a user that should not be allowed to authenticate for some reason.
   </p>
   <p>
    The
    <code>
     is_active
    </code>
    property should return True for users unless they are inactive, for example because they have been banned.
   </p>
   <p>
    The
    <code>
     is_anonymous
    </code>
    property should return True only for fake users that are not supposed to log in to the system.
   </p>
   <p>
    Finally, the
    <code>
     get_id
    </code>
    method should return a unique identifier for the user, in unicode format. We use the unique id generated by the database layer for this. Note that due to the differences in unicode handling between Python 2 and 3 we have to provide two alternative versions of this method.
   </p>
   <h2>
    User loader callback
   </h2>
   <p>
    Now we are ready to start implementing the login system using the Flask-Login and Flask-OpenID extensions.
   </p>
   <p>
    First, we have to write a function that loads a user from the database. This function will be used by Flask-Login (file
    <code>
     app/views.py
    </code>
    ):
   </p>
   <pre><code>@lm.user_loader
def load_user(id):
    return User.query.get(int(id))
</code></pre>
   <p>
    Note how this function is registered with Flask-Login through the
    <code>
     lm.user_loader
    </code>
    decorator. Also remember that user ids in Flask-Login are always unicode strings, so a conversion to an integer is necessary before we can send the id to Flask-SQLAlchemy.
   </p>
   <h2>
    The login view function
   </h2>
   <p>
    Next let's update our login view function (file
    <code>
     app/views.py
    </code>
    ):
   </p>
   <pre><code>from flask import render_template, flash, redirect, session, url_for, request, g
from flask.ext.login import login_user, logout_user, current_user, login_required
from app import app, db, lm, oid
from .forms import LoginForm
from .models import User

@app.route('/login', methods=['GET', 'POST'])
@oid.loginhandler
def login():
    if g.user is not None and g.user.is_authenticated:
        return redirect(url_for('index'))
    form = LoginForm()
    if form.validate_on_submit():
        session['remember_me'] = form.remember_me.data
        return oid.try_login(form.openid.data, ask_for=['nickname', 'email'])
    return render_template('login.html', 
                           title='Sign In',
                           form=form,
                           providers=app.config['OPENID_PROVIDERS'])
</code></pre>
   <p>
    Notice we have imported several new modules, some of which we will use later.
   </p>
   <p>
    The changes from our previous version are very small. We have added a new decorator to our view function. The
    <code>
     oid.loginhandler
    </code>
    tells Flask-OpenID that this is our login view function.
   </p>
   <p>
    At the top of the function body we check if
    <code>
     g.user
    </code>
    is set to an authenticated user, and in that case we redirect to the index page. The idea here is that if there is a logged in user already we will not do a second login on top.
   </p>
   <p>
    The
    <code>
     g
    </code>
    global is setup by Flask as a place to store and share data during the life of a request. As I'm sure you guessed by now, we will be storing the logged in user here.
   </p>
   <p>
    The
    <code>
     url_for
    </code>
    function that we used in the
    <code>
     redirect
    </code>
    call is defined by Flask as a clean way to obtain the URL for a given view function. If you want to redirect to the index page you may very well use
    <code>
     redirect('/index')
    </code>
    , but there are very
    <a href="http://flask.pocoo.org/docs/quickstart/#url-building">
     good reasons
    </a>
    to let Flask build URLs for you.
   </p>
   <p>
    The code that runs when we get a data back from the login form is also new. Here we do two things. First we store the value of the
    <code>
     remember_me
    </code>
    boolean in the flask
    <em>
     session
    </em>
    , not to be confused with the
    <code>
     db.session
    </code>
    from Flask-SQLAlchemy. We've seen that the
    <code>
     flask.g
    </code>
    object stores and shares data though the life of a request. The
    <code>
     flask.session
    </code>
    provides a much more complex service along those lines. Once data is stored in the session object it will be available during that request and any future requests
    <em>
     made by the same client
    </em>
    . Data remains in the session until explicitly removed. To be able to do this, Flask keeps a different session container for each client of our application.
   </p>
   <p>
    The
    <code>
     oid.try_login
    </code>
    call in the following line is the call that triggers the user authentication through Flask-OpenID. The function takes two arguments, the
    <code>
     openid
    </code>
    given by the user in the web form and a list of data items that we want from the OpenID provider. Since we defined our User class to include
    <code>
     nickname
    </code>
    and
    <code>
     email
    </code>
    , those are the items we are going to ask for.
   </p>
   <p>
    The OpenID authentication happens asynchronously. Flask-OpenID will call a function that is registered with the
    <code>
     oid.after_login
    </code>
    decorator if the authentication is successful. If the authentication fails the user will be taken back to the login page.
   </p>
   <h2>
    The Flask-OpenID login callback
   </h2>
   <p>
    Here is our implementation of the
    <code>
     after_login
    </code>
    function (file
    <code>
     app/views.py
    </code>
    ):
   </p>
   <pre><code>@oid.after_login
def after_login(resp):
    if resp.email is None or resp.email == "":
        flash('Invalid login. Please try again.')
        return redirect(url_for('login'))
    user = User.query.filter_by(email=resp.email).first()
    if user is None:
        nickname = resp.nickname
        if nickname is None or nickname == "":
            nickname = resp.email.split('@')[0]
        user = User(nickname=nickname, email=resp.email)
        db.session.add(user)
        db.session.commit()
    remember_me = False
    if 'remember_me' in session:
        remember_me = session['remember_me']
        session.pop('remember_me', None)
    login_user(user, remember = remember_me)
    return redirect(request.args.get('next') or url_for('index'))
</code></pre>
   <p>
    The
    <code>
     resp
    </code>
    argument passed to the
    <code>
     after_login
    </code>
    function contains information returned by the OpenID provider.
   </p>
   <p>
    The first
    <code>
     if
    </code>
    statement is just for validation. We require a valid email, so if an email was not provided we cannot log the user in.
   </p>
   <p>
    Next, we search our database for the email provided. If the email is not found we consider this a new user, so we add a new user to our database, pretty much as we have learned in the previous chapter. Note that we handle the case of a missing
    <code>
     nickname
    </code>
    , since some OpenID providers may not have that information.
   </p>
   <p>
    After that we load the
    <code>
     remember_me
    </code>
    value from the Flask session, this is the boolean that we stored in the login view function, if it is available.
   </p>
   <p>
    Then we call Flask-Login's
    <code>
     login_user
    </code>
    function, to register this is a valid login.
   </p>
   <p>
    Finally, in the last line we redirect to the
    <em>
     next
    </em>
    page, or the index page if a next page was not provided in the request.
   </p>
   <p>
    The concept of the next page is simple. Let's say you navigate to a page that requires you to be logged in, but you aren't just yet. In Flask-Login you can protect views against non logged in users by adding the
    <code>
     login_required
    </code>
    decorator. If the user tries to access one of the affected URLs then it will be redirected to the login page automatically. Flask-Login will store the original URL as the
    <code>
     next
    </code>
    page, and it is up to us to return the user to this page once the login process completed.
   </p>
   <p>
    For this to work Flask-Login needs to know what view logs users in. We can configure this in the app's module initializer (file
    <code>
     app/__init__.py
    </code>
    ):
   </p>
   <pre><code>lm = LoginManager()
lm.init_app(app)
lm.login_view = 'login'
</code></pre>
   <h2>
    The g.user global
   </h2>
   <p>
    If you were paying attention, you will remember that in the login view function we check
    <code>
     g.user
    </code>
    to determine if a user is already logged in. To implement this we will use the
    <code>
     before_request
    </code>
    event from Flask. Any functions that are decorated with
    <code>
     before_request
    </code>
    will run before the view function each time a request is received. So this is the right place to setup our
    <code>
     g.user
    </code>
    variable (file
    <code>
     app/views.py
    </code>
    ):
   </p>
   <pre><code>@app.before_request
def before_request():
    g.user = current_user
</code></pre>
   <p>
    This is all it takes. The
    <code>
     current_user
    </code>
    global is set by Flask-Login, so we just put a copy in the
    <code>
     g
    </code>
    object to have better access to it. With this, all requests will have access to the logged in user, even inside templates.
   </p>
   <h2>
    The index view
   </h2>
   <p>
    In a previous chapter we left our
    <code>
     index
    </code>
    view function using fake objects, because at the time we did not have users or posts in our system. Well, we have users now, so let's hook that up:
   </p>
   <pre><code>@app.route('/')
@app.route('/index')
@login_required
def index():
    user = g.user
    posts = [
        { 
            'author': {'nickname': 'John'}, 
            'body': 'Beautiful day in Portland!' 
        },
        { 
            'author': {'nickname': 'Susan'}, 
            'body': 'The Avengers movie was so cool!' 
        }
    ]
    return render_template('index.html',
                           title='Home',
                           user=user,
                           posts=posts)
</code></pre>
   <p>
    There are only two changes to this function. First, we have added the
    <code>
     login_required
    </code>
    decorator. This will ensure that this page is only seen by logged in users.
   </p>
   <p>
    The other change is that we pass
    <code>
     g.user
    </code>
    down to the template, instead of the fake object we used in the past.
   </p>
   <p>
    This is a good time to run the application.
   </p>
   <p>
    When you navigate to
    <code>
     http://localhost:5000
    </code>
    you will instead get the login page. Keep in mind that to login with OpenID you have to use the OpenID URL from your provider. You can use one of the OpenID provider links below the URL text field to generate the correct URL for you.
   </p>
   <p>
    As part of the login process you will be redirected to your provider's web site, where you will authenticate and authorize the sharing of some information with our application (just the email and nickname that we requested, no passwords or other personal information will be exposed).
   </p>
   <p>
    Once the login is complete you will be taken to the index page, this time as a logged in user.
   </p>
   <p>
    Feel free to try the
    <code>
     remember_me
    </code>
    checkbox. With this option enabled you can close and reopen your web browser and will continue to be logged in.
   </p>
   <h2>
    Logging out
   </h2>
   <p>
    We have implemented the log in, now it's time to add the log out.
   </p>
   <p>
    The view function for logging out is extremely simple (file
    <code>
     app/views.py
    </code>
    ):
   </p>
   <pre><code>@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('index'))
</code></pre>
   <p>
    But we are also missing a link to logout in the template. We are going to put this link in the top navigation bar which is in the base layout (file
    <code>
     app/templates/base.html
    </code>
    ):
   </p>
   <pre><code>&lt;html&gt;
  &lt;head&gt;
    {% if title %}
    &lt;title&gt;{{ title }} - microblog&lt;/title&gt;
    {% else %}
    &lt;title&gt;microblog&lt;/title&gt;
    {% endif %}
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;Microblog:
        &lt;a href="{{ url_for('index') }}"&gt;Home&lt;/a&gt;
        {% if g.user.is_authenticated %}
        | &lt;a href="{{ url_for('logout') }}"&gt;Logout&lt;/a&gt;
        {% endif %}
    &lt;/div&gt;
    &lt;hr&gt;
    {% with messages = get_flashed_messages() %}
    {% if messages %}
    &lt;ul&gt;
    {% for message in messages %}
        &lt;li&gt;{{ message }} &lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
    {% endif %}
    {% endwith %}
    {% block content %}{% endblock %}
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
   <p>
    Note how easy it is to do this. We just needed to check if we have a valid user set in
    <code>
     g.user
    </code>
    and if we do we just add the logout link. We have also used the opportunity to use
    <code>
     url_for
    </code>
    in our template.
   </p>
   <h2>
    Final words
   </h2>
   <p>
    We now have a fully functioning user login system. In the next chapter we will be creating the user profile page and will be displaying user avatars on them.
   </p>
   <p>
    In the meantime, here is the updated application code including all the changes in this article:
   </p>
   <p>
    Download
    <a href="https://github.com/miguelgrinberg/microblog/archive/version-0.5.zip">
     microblog-0.5.zip
    </a>
    .
   </p>
   <p>
    See you next time!
   </p>
   <p>
    Miguel
   </p>
  </div>
  <div class="social-bar">
   <table>
    <tr>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <a class="twitter-share-button" data-count="vertical" data-url="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins" data-via="miguelgrinberg" href="https://twitter.com/share">
        Tweet
       </a>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-left: 6px;">
       <div class="fb-like" data-font="verdana" data-href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins" data-layout="box_count" data-send="false" data-show-faces="false" data-width="450">
       </div>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <g:plusone href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins" size="tall">
       </g:plusone>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <script data-counter="top" data-url="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins" type="IN/Share">
       </script>
      </div>
     </td>
    </tr>
   </table>
  </div>
  <h4 style="text-align: right">
   <a name="comments">
   </a>
   217 comments
  </h4>
  <div class="comment">
   <ul>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/5e68c0b4e50e5e2792849a92ae5dab2c?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #1
       </span>
       <span class="label label-primary">
        buxur
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-14T15:47:54Z">
        2012-07-14T15:47:54Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hey miguel so rush but when are you going to post the next chapter?  

Thx
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #2
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-14T17:44:21Z">
        2012-07-14T17:44:21Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        buxur, I need a few more days to complete it. I was hoping I would get into a rhythm of one article per month, but I'm a bit behind.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/b50f24a5349355a5ce3845f2d1e1cf7e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #3
       </span>
       <span class="label label-primary">
        JonoB
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-19T18:05:50Z">
        2012-07-19T18:05:50Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        There are a few mistakes on this page:
1. its flask.ext. not flaskext.
2. You did not define a login_view from the LoginManager in __init-.py__ as follows lm.login_view = 'login'
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #4
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-20T03:22:12Z">
        2012-07-20T03:22:12Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @JonoB: thanks for your detailed review. Regarding #1 I confirmed that at least in my installation (as I described in the first tutorial post) I have login.py inside site-packages/flaskext, not site-packages/flask/ext. Regarding #2 you are absolutely correct. I have the change in the code, but forgot to mention it. This is now corrected.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/8d7dd06bd18b8fce6a4c04dfede7f616?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #5
       </span>
       <span class="label label-primary">
        drew
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-09-11T19:12:20Z">
        2012-09-11T19:12:20Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Greetings again Minguel, first and foremost thanks so much for providing this resource. I was hoping you might have insight as to why i get this error:

/microblog/app/views.py", line 2, in &lt;module&gt;
    from flaskext.login import login_user, logout_user, current_user, login_required
ImportError: No module named login

Secondly, I’m new to web design and have a great interest in flask, are you aware of any resources which might better help me understand how to get off the ground?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #6
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-09-12T05:34:39Z">
        2012-09-12T05:34:39Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @drew: the error likely means that the flask-login module isn't installed, or that it isn't installed in the right place. As far as learning resources, there isn't much out there that is specific to Flask, unfortunately. Since Flask is actually a pretty thin layer on top of regular Python, learning about general Python programming is very helpful, as is to learn about the HTTP protocol. Good luck!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/1661cae67eb67a731d0ce517f641719a?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #7
       </span>
       <span class="label label-primary">
        Jaco
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-09-30T17:10:19Z">
        2012-09-30T17:10:19Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hello there. Firstly let me concur. Thank you for highly informative, well written and accurate tutorial. Really enjoying finding my way through it. I also got the "No module named login" import error. Had a look, found the following. Under site-packages there is now a flask_login module. Changed the code to "from flask_login import LoginManager" and it worked. Looking forward to next installment. Thank you.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #8
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-09-30T17:34:35Z">
        2012-09-30T17:34:35Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Jaco: for some reason the flask-login sources got installed in a different place for you than for me. I have a login.py file inside "site-packages/flaskext", and this seems to agree with the Flask-Login documentation. In any case, I don't think it matters much, as long as you can import the module the rest should work in the same way. Thanks!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/1661cae67eb67a731d0ce517f641719a?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #9
       </span>
       <span class="label label-primary">
        jaco_
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-09-30T17:44:55Z">
        2012-09-30T17:44:55Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hello again Miguel. All was going great up to this point. I checked the file flask_login and it contains the docs from the flask login extension as well as the LoginManager class. I'm running on Ubuntu 12.04 btw.
However adding the view (with decorator) @lm.user_loader I get NameError 'lm' is not defined. Error occurs in last line of __init__.py when importing views. Not sure where to look now?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/1661cae67eb67a731d0ce517f641719a?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #10
       </span>
       <span class="label label-primary">
        jaco
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-09-30T19:39:09Z">
        2012-09-30T19:39:09Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hello Miguel. Doing some research i found this link http://flask.pocoo.org/docs/extensiondev/#extension-import-transition = right at the bottom there is a discussion on Extension Import Transition that you might find handy. Explains the problem I encountered. Still trying to figure out the rest though. Thanks again for the efforts and informatinve tutorials.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/1661cae67eb67a731d0ce517f641719a?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #11
       </span>
       <span class="label label-primary">
        jaco
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-10-01T09:48:07Z">
        2012-10-01T09:48:07Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hello again. Apologies for all the comments. Happy if you want to remove some. My error above "'lm' is not defined. Error occurs in last line of __init__.py when importing views." refers. I had the debug server up and running and it crashed as soon as I entered the @lm.user_loader (because I have not added the import lm at the top yet. Maybe you could just 'add' that import where you show that view?
Anyway. looking forward to the next installments. Thank you.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #12
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-10-02T04:09:40Z">
        2012-10-02T04:09:40Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @jaco: do you have a "from app import lm" at the top of views.py?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/110b30a978c33ff4802bc119b47a1122?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #13
       </span>
       <span class="label label-primary">
        Siros
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-10-09T08:03:51Z">
        2012-10-09T08:03:51Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Thank you,
a little notice here , 

flaskext.login , flaskext.openid does not work any more.

it have to be flask.ext.login , flask.ext.openid.

Thanks again for the details tut
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/6460de7da75f46fdc814596c78c1a382?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #14
       </span>
       <span class="label label-primary">
        pod
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-11-07T02:47:11Z">
        2012-11-07T02:47:11Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Flask 0.8 or later version 

from flaskext.login import LoginManager
from flaskext.openid import OpenID
change -&gt;

from flask.ext.login import LoginManager
from flask.ext.openid import OpenID
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/98738bd3a0d2edf92ac21ae17f5179ea?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #15
       </span>
       <span class="label label-primary">
        Andrey
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-11-14T11:32:09Z">
        2012-11-14T11:32:09Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        After the last listing you say: "We have also used the opportunity to use url_for in our template."
Actually, you haven't. At least in snippet on this page, as zip archive contains correct version.

Also, as it was already said, in latest versions of flask extension import system has been changed.
This import problems are beacuse you and your readers are using different versions of flask and other modules.
And they will be eliminated, if you require readers to download the same module versions as you have.

This is very easy: just run "pip freeze &gt; requirements.txt" and publish resulted file.
Your users can recreate exact environment with "pip install -r requirements.txt". You could publish req file in the first step of your tutorial.

Many thanks for this tutorial series!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #16
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-11-15T08:08:33Z">
        2012-11-15T08:08:33Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Andrey, thanks for pointing out the url_for problem, I have corrected the template. As for the module import problems I don't think requiring a specific version of Flask and its extensions is the way to go, it does not make sense to me to require people to run old software just because that's what works for me. If you go read the documentation for the most recent versions of some of these extensions they still indicate flaskext is their root namespace. I know this is going to change at some point given that flaskext has been deprecated, but at least up until a couple of weeks ago all the most recent versions of the extensions I'm using in my project worked with the code as I have it published (on Windows, the platform I spend most of my time on, I guess I should check the others as well but I haven't). I routinely upgrade my flask virtual environment and try to keep things working on the latest stuff. Thanks for your comment.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/119e78d118046136f45c244da1cfce08?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #17
       </span>
       <span class="label label-primary">
        Edwin
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-11-26T03:07:35Z">
        2012-11-26T03:07:35Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I'm getting an "ImportError: cannot import name lm"...Can anyone help me with that?. Thanks.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #18
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-11-26T05:35:58Z">
        2012-11-26T05:35:58Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Edwin: did you read all the comments in this article regarding the location of flask-login?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/119e78d118046136f45c244da1cfce08?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #19
       </span>
       <span class="label label-primary">
        Edwin
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-11-26T13:49:26Z">
        2012-11-26T13:49:26Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Ok, sorry, just realized comment #12 was there...that was the issue. Thanks! Excellent tutorial by the way. Congrats.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/e087c44c53d1214db5fb37e4c345f533?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #20
       </span>
       <span class="label label-primary">
        Adam
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-11-28T23:10:11Z">
        2012-11-28T23:10:11Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I'm having the same problem as Jaco.

Although I have successfully run...
pip install flask-login

All three of the following produce the "lm is not defined" error:

from flask_login import LoginManager
from flaskext.login import LoginManager
from flask.ext.login import LoginManager

despite having the same code in my __init__ and views.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #21
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-11-29T01:46:24Z">
        2012-11-29T01:46:24Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Adam: are you sure you are running run.py in the virtualenv's Python interpreter? The more likely cause for your problem is that you installed flask-login in a virtualenv but are running the application under another, or the global one.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/bb251816600ca8146f2b49f53f60b302?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #22
       </span>
       <span class="label label-primary">
        Don
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-12-14T01:25:25Z">
        2012-12-14T01:25:25Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I'm at User Logins and so far this is one of the best tutorials I've ever done. I mean that. You took the time to do this right and it's great!  Thank you.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/a85136c7b3866b61fadccc6c7ae5a348?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #23
       </span>
       <span class="label label-primary">
        Steven Elliott
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-12-23T23:06:22Z">
        2012-12-23T23:06:22Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        setup_app() is deprecated.

Instead:
    lm = LoginManager()
    lm.init_app(app)
    oid = OpenID(app, os.path.join(basedir, 'tmp'))
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/3d652f6a8ad66344c629f1204b380c7c?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #24
       </span>
       <span class="label label-primary">
        Peter
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-01-11T00:24:30Z">
        2013-01-11T00:24:30Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel.  Awesome blog, but I get an error when I try to use OpenID to log in:
AttributeError: 'NoneType' object has no attribute 'split'
nickname = resp.email.split('@')[0]
Looks like OpenID is not returning an email address, which is a bit of an issue.  Any suggestions?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/f55f3590e9ada038b9b53983024eb144?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #25
       </span>
       <span class="label label-primary">
        joshua
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-01-21T16:10:44Z">
        2013-01-21T16:10:44Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Good job! There are a few mistakes on this page:
1.
from flaskext.login import LoginManager
from flaskext.openid import OpenID
2.
from flaskext.login import login_user, logout_user, current_user, login_required
       </p>
      </div>
     </div>
    </li>
   </ul>
  </div>
  <div class="page">
   <ul class="pager">
    <li class="previous disabled">
     <a href="#">
      ««
     </a>
    </li>
    <li class="previous disabled">
     <a href="#">
      «
     </a>
    </li>
    <li class="next">
     <a href="/post/the-flask-mega-tutorial-part-v-user-logins/page/0#comments">
      »»
     </a>
    </li>
    <li class="next">
     <a href="/post/the-flask-mega-tutorial-part-v-user-logins/page/2#comments">
      »
     </a>
    </li>
   </ul>
  </div>
 </div>
</div>

    </html>
    