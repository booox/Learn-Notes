
    <!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>The Flask Mega-Tutorial</title>
    <link href="style.css" rel="stylesheet" type="text/css" />
    </head>
    <div id="main">
 <div class="post">
  <p class="date">
   <span class="flask-moment" data-format="format('LL')" data-refresh="0" data-timestamp="2013-04-15T06:14:46Z">
    2013-04-15T06:14:46Z
   </span>
  </p>
  <h1 class="post-title">
   <a href="/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi">
    The Flask Mega-Tutorial, Part XVII: Deployment on Linux (even on the Raspberry Pi!)
   </a>
  </h1>
  <div class="post_body">
   <p>
    This is the seventeenth article in the series in which I document my experience writing web applications in
    <a href="http://python.org">
     Python
    </a>
    using the
    <a href="http://flask.pocoo.org">
     Flask
    </a>
    microframework.
   </p>
   <p>
    The goal of the tutorial series is to develop a decently featured microblogging application that demonstrating total lack of originality I have decided to call
    <code>
     microblog
    </code>
    .
   </p>
   <p>
    <strong>
     NOTE
    </strong>
    : This article was revised in September 2014 to be in sync with current versions of Python and Flask.
   </p>
   <p>
    Here is an index of all the articles in the series that have been published to date:
   </p>
   <ul>
    <li>
     <a href="the-flask-mega-tutorial-part-i-hello-world">
      Part I: Hello, World!
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-ii-templates">
      Part II: Templates
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-iii-web-forms">
      Part III: Web Forms
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-iv-database">
      Part IV: Database
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-v-user-logins">
      Part V: User Logins
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-vi-profile-page-and-avatars">
      Part VI: Profile Page And Avatars
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-vii-unit-testing">
      Part VII: Unit Testing
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-viii-followers-contacts-and-friends">
      Part VIII: Followers, Contacts And Friends
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-ix-pagination">
      Part IX: Pagination
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-x-full-text-search">
      Part X: Full Text Search
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xi-email-support">
      Part XI: Email Support
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xii-facelift">
      Part XII: Facelift
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xiii-dates-and-times">
      Part XIII: Dates and Times
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xiv-i18n-and-l10n">
      Part XIV: I18n, L10n
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xv-ajax">
      Part XV: Ajax
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xvi-debugging-testing-and-profiling">
      Part XVI: Debugging, Testing and Profiling
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi">
      Part XVII: Deployment on Linux (even on the Raspberry Pi!)
     </a>
     (this article)
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud">
      Part XVIII: Deployment on the Heroku Cloud
     </a>
    </li>
   </ul>
   <p>
    Today we are reaching a huge milestone in the life of our
    <code>
     microblog
    </code>
    application. We are going public with it, as we will be looking at different ways in which we can deploy it and make it accessible to our users.
   </p>
   <p>
    In this article I will explore the traditional hosting options, and will be looking at hands-on deployment on a Linux box and on the widely popular Raspberry Pi minicomputer. In the next article we will be looking at deployment on cloud services.
   </p>
   <p>
    To begin we will be looking at the more traditional of all deployment options. We will install the application behind a web server on a dedicated host that we will manage.
   </p>
   <p>
    But where can we find a host? These days there are many cheap server offers out there. The cheapest options are for a VPS (virtual private server), which is virtual machine that looks like a standalone and dedicated server to you, but is really sharing the physical hardware with a few others like it. You can check on
    <a href="http://www.lowendbox.com">
     lowendbox.com
    </a>
    for deals if you want to get one to experiment with (note that I'm not affiliated with them, I do not endorse them or make money if you click the link above).
   </p>
   <p>
    Another easy way to obtain a host is to install a virtual machine on your regular PC. If you are a Windows or Mac user and would like to experience deploying the application to a Linux server without spending a dime, then this is the way to go. You can install
    <a href="https://www.virtualbox.org/">
     VirtualBox
    </a>
    on your system, download an ISO image for the Linux distribution of your choice and then create a VM on which you install this ISO image.
   </p>
   <p>
    Let's talk a bit about operating system choices. I think there are four decent choices for hosting a web server:
   </p>
   <ul>
    <li>
     Linux
    </li>
    <li>
     BSD
    </li>
    <li>
     OS X
    </li>
    <li>
     Windows
    </li>
   </ul>
   <p>
    From a technical point of view you could setup a Python based web server on any of the above, so how do we choose?
   </p>
   <p>
    In my opinion the choice isn't too hard to make. For me it is important that we are on a platform that is open source, because the community at large does a much better job at keeping a platform safe and secure than what a single company can do on a closed source product. We also want to be on a platform that has a large server installation base, because that gives us more chances of finding solutions to our problems. Based on the above criteria, I consider Windows and OS X inferior to Linux and BSD as servers.
   </p>
   <p>
    So now we are down to two options. The choice of Linux vs. BSD is an easy one for me: It does not matter. Both are excellent options for hosting a web server. Depending on the hosting provider you may have Linux or BSD options to choose from, so I just simply use what's available.
   </p>
   <p>
    There are many Linux and BSD distributions out there, so how to pick one? This is largely a matter of preference, but if we are going to try to use what the majority use we can look at the distributions according to some of their major characteristics, and then pick a popular distribution in the group of choice:
   </p>
   <ul>
    <li>
     RPM based (RedHat, CentOS, Fedora)
    </li>
    <li>
     Debian based (Debian, Ubuntu, Mint)
    </li>
    <li>
     BSD based (FreeBSD, NetBSD, OpenBSD)
    </li>
    <li>
     others
    </li>
   </ul>
   <p>
    I'm sure my simplistic grouping of distros will offend some. I'm also sure many will have the need to mention that Mac OS X is BSD based and as such should be in my list. Keep in mind that this classification is just my own, I don't expect everyone will agree with me.
   </p>
   <p>
    As an exercise in preparing this article I tested a few Linux distros (I'm using a VPS that does not offer BSD choices). I tried Fedora, Ubuntu, Debian and CentOS. None of them was straightforward, unfortunately, but out of all of these, the CentOS install was the one with less complications, so that's the one I'm going to describe here.
   </p>
   <p>
    If you have never done this you may find the setup task to be extremely laborious, and you would be correct if you think that. The thing is, once the server is setup it takes very little effort to keep it running.
   </p>
   <p>
    Ready? Here we go!
   </p>
   <h2>
    Hosting on CentOS 6
   </h2>
   <p>
    I'm going to assume that we have a clean install of CentOS 6 on a dedicated server or VPS. A VM in your PC also works, but go ahead and do a standard install before starting.
   </p>
   <h3>
    Client side setup
   </h3>
   <p>
    We will be managing this server remotely from our own PC, so we need a tool that we can use to login into this system and run commands. If your PC runs Linux or OS X then you already have
    <a href="http://www.openssh.org/">
     OpenSSH
    </a>
    installed. If you are on Windows then there are two very decent ways to get SSH functionality:
   </p>
   <ul>
    <li>
     <a href="http://www.cygwin.com/">
      Cygwin
     </a>
     (select the OpenSSH package in the installer)
    </li>
    <li>
     <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">
      Putty
     </a>
    </li>
   </ul>
   <p>
    Cygwin is much more than SSH, it provides a Linux like environment inside your Windows box. Putty, on the other side, is just an SSH tool. Since I want to cover the most ground, the instructions below will be for Linux, OS X and Cygwin users. If you use Putty on Windows, then there is a little bit of translation required.
   </p>
   <p>
    Let's begin by logging in to our shiny new CentOS 6 box. Open a command line prompt on your PC (a Cygwin prompt if you are on Windows) and run the following:
   </p>
   <pre><code>$ ssh root@&lt;your-server&gt;
</code></pre>
   <p>
    This is saying that you want to login to the system as user
    <code>
     root
    </code>
    , the admin of the system. You should replace
    <code>
     &lt;your-server&gt;
    </code>
    with the IP address or hostname of your server. Note the
    <code>
     $
    </code>
    is the command line prompt, you do not type that.
   </p>
   <p>
    You will be asked to provide the password for user
    <code>
     root
    </code>
    . If this is a dedicated server or VPS that you purchased, you must have been asked about this password during the setup process. If this is your own VM then you chose a root password during installation.
   </p>
   <h3>
    Installing software packages
   </h3>
   <p>
    Now that we are logged in, we need to install all the software that we will be using to deploy our server, which obviously include Python and a web server. We will also switch from sqlite to a more robust MySQL database.
   </p>
   <p>
    The command to install software on CentOS is called
    <code>
     yum
    </code>
    . We can install all the packages we need using a single command:
   </p>
   <pre><code>$ yum install python python-devel python-virtualenv httpd httpd-devel mysql-server mysql-devel git gcc sudo
</code></pre>
   <p>
    Some of these could be already installed, but it doesn't hurt to be safe and request all the packages we need,
    <code>
     yum
    </code>
    will only install what's missing.
   </p>
   <p>
    The packages we just installed are:
   </p>
   <ul>
    <li>
     <code>
      python
     </code>
     and
     <code>
      python-devel
     </code>
     : the Python interpreter and its  development package
    </li>
    <li>
     <code>
      virtualenv
     </code>
     : the Python script that creates virtual environments
    </li>
    <li>
     <code>
      httpd
     </code>
     and
     <code>
      httpd-devel
     </code>
     : The Apache web server and its development package
    </li>
    <li>
     <code>
      mysql-server
     </code>
     and
     <code>
      mysql-devel
     </code>
     : The MySQL database server and its development package
    </li>
    <li>
     <code>
      git
     </code>
     : source code version control system (we will use it to download and update the application)
    </li>
    <li>
     <code>
      gcc
     </code>
     : the C/C++ compiler (needed to compile Python extensions)
    </li>
    <li>
     <code>
      sudo
     </code>
     : a tool that helps users run commands as other users.
    </li>
   </ul>
   <h3>
    Creating a user account to host the application
   </h3>
   <p>
    We will now setup a user account on which we will host our application. In case the reasons aren't clear, the
    <code>
     root
    </code>
    account has the maximum privileges, so we could easily delete or destroy important parts of the system by mistake. If we work inside a restricted account then all the important parts of the system will be out of reach so we are protected against mistakes. A second, maybe more important reason to not use the root account is that if a hacker gets hold of this account he will own our server. We want to hide the root account as much as possible, I like to disable root account logins completely on production servers.
   </p>
   <p>
    We will call this new account
    <code>
     apps
    </code>
    , assuming we could host several applications inside it. Since the applications will be run by the web server account, we will make the group of our
    <code>
     apps
    </code>
    account the group of the web server account (which was created for us when Apache was installed), so that the web server has permission to read and write on these files. If you are not familiar with Unix user permissions, then an introduction is available over at
    <a href="http://en.wikipedia.org/wiki/Filesystem_permissions#Traditional_Unix_permissions">
     this Wikipedia page
    </a>
    .
   </p>
   <p>
    The command to create the
    <code>
     apps
    </code>
    account on CentOS is:
   </p>
   <pre><code>$ adduser -g apache apps
</code></pre>
   <p>
    The
    <code>
     -g
    </code>
    option makes the primary group of this account the
    <code>
     apache
    </code>
    group, which on CentOS is the group of the
    <code>
     apache
    </code>
    user account. As part of the account setup you will have to enter a password for this account.
   </p>
   <p>
    The
    <code>
     adduser
    </code>
    command will create a home directory for the new account, at
    <code>
     /home/apps
    </code>
    . Unfortunately, when we go check the permissions of this directory we find it to only be accessible to the owner:
   </p>
   <pre><code>$ ls /home -l
total 7
drwx------ 2 apps  apache 4096 Apr  7 11:46 apps
</code></pre>
   <p>
    We decided we want the
    <code>
     apache
    </code>
    group users to be able to freely work on the files on this account, so we have to give the group enough permissions:
   </p>
   <pre><code>$ chmod 775 /home/apps
</code></pre>
   <p>
    Consult the documentation for the
    <code>
     chmod
    </code>
    tool for detailed information. The
    <code>
     775
    </code>
    permisions will allow the owner and the group full access, and will also give others permission to read and execute, but not write to this directory.
   </p>
   <h3>
    Password-less logins
   </h3>
   <p>
    The next step is to be able to login to this account from our PC without using a password. The SSH tool supports another type of authentication, called
    <a href="http://en.wikipedia.org/wiki/Public-key_cryptography">
     public key
    </a>
    . If you are on a non-Windows OS it is very likely that you already have keys installed on your system.
   </p>
   <p>
    Now open a terminal window on your own PC (Cygwin's bash shell for Windows users). To check if you have keys installed run the following command:
   </p>
   <pre><code>$ ls ~/.ssh
id_rsa  id_rsa.pub
</code></pre>
   <p>
    If the directory listing shows files named
    <code>
     id_rsa
    </code>
    and
    <code>
     id_rsa.pub
    </code>
    like above then you are good to go. If you don't have these files then you have to run the following command:
   </p>
   <pre><code>$ keygen -t rsa
</code></pre>
   <p>
    This application will prompt you to enter a few things, for which I recommend you accept the defaults by pressing Enter on all the prompts. If you know what you are doing and want to do otherwise, you are certainly welcome to.
   </p>
   <p>
    After this command runs you should have the two files listed above. The file
    <code>
     id_rsa.pub
    </code>
    is your public key, the data in this file can be shared with others without creating a security risk. The
    <code>
     id_rsa
    </code>
    file is your private key, so you should never share the contents of this file with anyone.
   </p>
   <p>
    We will now add our public key to our server, so that it knows who we are. Still on our local PC we start by printing the public key file:
   </p>
   <pre><code>$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCjwaK4JVuY6PZAr8HocCIOszrLIzzCjO0Xlt9zkFNKvVpP1B92u3JvwwiagqR+k0kHih2SmYnycmXjAcE60tvu+sIDA/7tEJZh4kO4nUYM5PJ17E+qTqUleBXQM74eITydq/USkOqc5p++qUUgA60gUUuNum3igbZiNi71zK4m8g/IDywWYk+5vzNt2i7Sm8NEuauy/xWgnWhCBXZ/tXfkgWgC/4HzpmsfO+nniNh8VgTZp8Q+y+4psSE+p14qUg7KdDbf0Wo/D35wDkMvto96bIT8RF0np9dTkFj8TgNW8inP+6MC+4vCd8F/NpESCVt8hRlBVERMF8Xv4f/0+7WT miguel@miguelspc
</code></pre>
   <p>
    Now we need to copy this data to the clipboard and then switch to the CentOS system, where we will issue these commands:
   </p>
   <pre><code>$ mkdir /home/apps/.ssh
$ echo &lt;paste-your-key-here&gt; &gt; /home/apps/.ssh/authorized_keys
</code></pre>
   <p>
    For my server and public key the following commands are necessary:
   </p>
   <pre><code>$ mkdir /home/apps/.ssh
$ echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCjwaK4JVuY6PZAr8HocCIOszrLIzzCjO0Xlt9zkFNKvVpP1B92u3JvwwiagqR+k0kHih2SmYnycmXjAcE60tvu+sIDA/7tEJZh4kO4nUYM5PJ17E+qTqUleBXQM74eITydq/USkOqc5p++qUUgA60gUUuNum3igbZiNi71zK4m8g/IDywWYk+5vzNt2i7Sm8NEuauy/xWgnWhCBXZ/tXfkgWgC/4HzpmsfO+nniNh8VgTZp8Q+y+4psSE+p14qUg7KdDbf0Wo/D35wDkMvto96bIT8RF0np9dTkFj8TgNW8inP+6MC+4vCd8F/NpESCVt8hRlBVERMF8Xv4f/0+7WT miguel@miguelspc &gt; /home/apps/.ssh/authorized_keys
</code></pre>
   <p>
    These commands write your public key to the file
    <code>
     authorized_keys
    </code>
    in the server. This makes your public key known to OpenSSH on the server. The remaining task is to secure the
    <code>
     .ssh
    </code>
    directory and the
    <code>
     authorized_keys
    </code>
    file inside it:
   </p>
   <pre><code>$ chown -R apps:apache /home/apps/.ssh
$ chmod 700 /home/apps/.ssh
$ chmod 600 /home/apps/.ssh/authorized_keys
</code></pre>
   <p>
    These commands change the ownership of these files to the
    <code>
     apps
    </code>
    account and then make the directory and file only accessible by the new owner.
   </p>
   <p>
    The password-less login should now be working. We will now logout of the
    <code>
     root
    </code>
    account of our server and then login again, but this time we will login as the
    <code>
     apps
    </code>
    user:
   </p>
   <pre><code>$ ssh apps@&lt;your-server&gt;
</code></pre>
   <p>
    If everything goes well you should not need to enter a password to obtain access.
   </p>
   <h3>
    Installing the application
   </h3>
   <p>
    We will now use
    <code>
     git
    </code>
    to download and install
    <code>
     microblog
    </code>
    into the server. If you are not familiar with
    <code>
     git
    </code>
    I recommend that you read
    <a href="http://ryanflorence.com/git-for-beginners/">
     git for beginners
    </a>
    .
   </p>
   <p>
    The application must be available in a git server that can be reached from our web server. I will be using my own github hosted application. You are welcome to use it as well, or if you prefer you can also clone it and make one that is yours.
   </p>
   <p>
    To install
    <code>
     microblog
    </code>
    in our server we just issue a
    <code>
     git clone
    </code>
    command:
   </p>
   <pre><code>$ git clone https://github.com/miguelgrinberg/microblog.git
$ cd microblog
</code></pre>
   <p>
    The latest version of the application has a few changes from how we left it in the previous article.
   </p>
   <p>
    First, there are a few new files at the top level,
    <code>
     runp-sqlite.fcgi
    </code>
    ,
    <code>
     runp-mysql.fcgi
    </code>
    ,
    <code>
     killpython
    </code>
    and
    <code>
     requirements.txt
    </code>
    . The
    <code>
     *.fcgi
    </code>
    scripts are starter scripts that are invoked by servers that use the
    <a href="http://www.fastcgi.com/drupal/">
     FastCGI
    </a>
    protocol. The
    <code>
     killpython
    </code>
    script will help us restart the application after we upgrade it. The
    <code>
     requirements.txt
    </code>
    file lists all the dependencies that we need to install to run our application. We will look at all these later.
   </p>
   <p>
    Another interesting change is in our
    <code>
     config.py
    </code>
    file. Up to now we initialized our database as follows:
   </p>
   <pre><code>SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'app.db')
</code></pre>
   <p>
    Now we have this instead:
   </p>
   <pre><code>if os.environ.get('DATABASE_URL') is None:
    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'app.db')
else:
    SQLALCHEMY_DATABASE_URI = os.environ['DATABASE_URL']
</code></pre>
   <p>
    This is a simple change that enables us to override the database the application will use by setting an environment variable. You will see how we take advantage of this change in the next section.
   </p>
   <h3>
    Setting up MySQL
   </h3>
   <p>
    The sqlite database that we've been using all this time is great for simple applications, but when we get into a full blown web server that can serve multiple requests at a time it is a better idea to use a more robust database. So we will setup a MySQL database for
    <code>
     microblog
    </code>
    .
   </p>
   <p>
    We have installed MySQL already, so all that is left is to create a database and a user that has permissions on it. To manage our database server we use the
    <code>
     mysql
    </code>
    tool:
   </p>
   <pre><code>$ mysql -u root -p
Enter password: (enter the mysql root password, or empty if one is not defined)
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 11
Server version: 5.1.67 Source distribution

Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt;
</code></pre>
   <p>
    And now that we are in the mysql prompt we can go ahead and create a database and a user, both named
    <code>
     apps
    </code>
    :
   </p>
   <pre><code>mysql&gt; create database apps character set utf8 collate utf8_bin;
mysql&gt; create user 'apps'@'localhost' identified by 'apps';
mysql&gt; grant all privileges on apps.* to 'apps'@'localhost';
mysql&gt; flush privileges;
mysql&gt; quit;
</code></pre>
   <p>
    Note that you will need to pick a password for the
    <code>
     apps
    </code>
    MySQL user in the
    <code>
     identified by
    </code>
    section. For simplicity I have picked
    <code>
     apps
    </code>
    as password, but on a real installation a hard to guess password should be used. Do not confuse the database
    <code>
     apps
    </code>
    user with the system's
    <code>
     apps
    </code>
    user.
   </p>
   <h3>
    Initializing the application
   </h3>
   <p>
    Now that we have a database ready we can initialize
    <code>
     microblog
    </code>
    .
   </p>
   <p>
    We start by creating and populating the Python virtualenv:
   </p>
   <pre><code>$ virtualenv flask
$ flask/bin/pip install -r requirements.txt
$ flask/bin/pip install mysql-python
</code></pre>
   <p>
    Note that in addition to installing all the dependencies listed in the
    <code>
     requirements.txt
    </code>
    file we add the MySQL support, which is required by SQLAlchemy when connecting to that database server.
   </p>
   <p>
    Then we create the database:
   </p>
   <pre><code>$ DATABASE_URL=mysql://apps:apps@localhost/apps ./db_create.py
</code></pre>
   <p>
    Note how we set an environment variable to point to our new MySQL database instead of the sqlite default.
   </p>
   <p>
    Next we compile all the messages in our translation database:
   </p>
   <pre><code>$ ./tr_compile.py
</code></pre>
   <p>
    And to finalize, we enable group write access to the two folders that need to be written to by the web server:
   </p>
   <pre><code>$ chmod -R g+w search.db tmp
</code></pre>
   <p>
    The
    <code>
     search.db
    </code>
    folder is used by our Whoosh full text search database. The
    <code>
     tmp
    </code>
    directory should be left open so that new files can be created there when needed.
   </p>
   <h3>
    Setting up Apache
   </h3>
   <p>
    The last thing to do is to configure our Apache web server.
   </p>
   <p>
    We wil be using the
    <code>
     mod_fcigd
    </code>
    module to handle the FastCGI communication with our application. Many Linux distributions offer a package for
    <code>
     mod_fcgid
    </code>
    , but unfortunately CentOS is not one of them, so we will build this module from its source code.
   </p>
   <p>
    Here is the list of commands that build and install the current release of
    <code>
     mod_fcgid
    </code>
    :
   </p>
   <pre><code>$ wget http://mirror.metrocast.net/apache/httpd/mod_fcgid/mod_fcgid-2.3.9.tar.gz
$ tar xvzf mod_fcgid-2.3.9.tar.gz
$ cd mod_fcgid-2.3.9
$ APXS=/usr/sbin/apxs ./configure.apxs
$ su
(enter root password)
$ make install
</code></pre>
   <p>
    You can consult the
    <code>
     mod_fcgid
    </code>
    documentation if you want details on the above commands.
   </p>
   <p>
    With this module installed we can now configure our server. For this we need to edit the Apache configuration file. Linux distributions do not agree on a standard location and name for this file, so you will need to figure out where this file is. On CentOS, the config file is located at
    <code>
     /etc/httpd/conf/httpd.conf
    </code>
    .
   </p>
   <p>
    The changes that we need to make are simply to define our server. At the bottom of the configuration file we add the following (from the root account, since this file is not writable to regular users):
   </p>
   <pre><code>FcgidIPCDir /tmp
AddHandler fcgid-script .fcgi
&lt;VirtualHost *:80&gt;
    DocumentRoot /home/apps/microblog/app/static
    Alias /static /home/apps/microblog/app/static
    ScriptAlias / /home/apps/microblog/runp-mysql.fcgi/
&lt;/VirtualHost&gt;
</code></pre>
   <p>
    The
    <code>
     FcgidIPCDir
    </code>
    sets the directory where the file sockets will be created. I've found that on CentOS this was going by default to a directory where the
    <code>
     apache
    </code>
    user did not have write permissions, so I'm putting all these files on
    <code>
     /tmp
    </code>
    instead.
   </p>
   <p>
    Next we use
    <code>
     AddHandler
    </code>
    to tell apache that any files that have a
    <code>
     .fcgi
    </code>
    extension should be treated as FastCGI files and routed through the
    <code>
     mod_fcgid
    </code>
    module that we just installed. Remember the new
    <code>
     runp-mysql.fcgi
    </code>
    file that we have in our root folder? This file uses the
    <code>
     flipflop
    </code>
    Python module as an adapter so that our application can speak the FastCGI protocol. Let's have a quick look at this file:
   </p>
   <pre><code>#!flask/bin/python
import os
os.environ['DATABASE_URL'] = 'mysql://apps:apps@localhost/apps'

from flipflop import WSGIServer
from app import app

if __name__ == '__main__':
    WSGIServer(app).run()
</code></pre>
   <p>
    Apache will execute this script to start our application. Note how we insert the MySQL database name in the environment, so that Apache can see it.
   </p>
   <p>
    The
    <code>
     &lt;VirtualHost&gt;
    </code>
    section defines the host that will run our web server. The
    <code>
     *:80
    </code>
    denomination indicates that any requests that arrive at the server for any hostnames on port 80 will be handled by this virtual server. The configuration can have multiple
    <code>
     &lt;VirtualHost&gt;
    </code>
    sections, each defining a different server. To differentiate the servers you can use different IP addresses, domain or sub-domain names or ports.
   </p>
   <p>
    The definition of our virtual host is pretty simple. The
    <code>
     DocumentRoot
    </code>
    statement tells Apache where to look for static files. Any requests for files will be served our of this folder, so for example, when browsers ask for a
    <code>
     /favicon.ico
    </code>
    file to show the little icon next to the URL Apache will try to find it here. Unfortunately all the static files that we use in our application have a
    <code>
     /static
    </code>
    prefix, so to prevent Apache from looking for another
    <code>
     static
    </code>
    folder we use the
    <code>
     Alias
    </code>
    statement, which just says that anything that starts with
    <code>
     /static
    </code>
    should go directly to our folder. Finally, the
    <code>
     ScriptAlias
    </code>
    statement tells Apache that when a request that starts with
    <code>
     /
    </code>
    arrives  (basically all requests that are not for static files) then use the script indicated as second argument to handle it, and that is our
    <code>
     .fcgi
    </code>
    script.
   </p>
   <p>
    The Apache config file supports many more options that I will not mention here. I recommend that you review the Apache documentation to decide what options make sense for your server.
   </p>
   <p>
    To activate the changes we made we need to restart the apache server, again from the root account:
   </p>
   <pre><code>$ service httpd restart
</code></pre>
   <p>
    And now from the browser on your PC you should be able to access microblog at the address
    <code>
     http://&lt;your-server&gt;
    </code>
    .
   </p>
   <h3>
    Installing application updates
   </h3>
   <p>
    The last remaining thing we are going to look at for this server is how to roll out an update of the application.
   </p>
   <p>
    Let's assume we have deployed the application and it has been running happily for a while on our server. Now it's time to push an update, which could fix some bugs we found, or just add features.
   </p>
   <p>
    We will use
    <code>
     git
    </code>
    and our own tools for this. If we login to the web server using the
    <code>
     apps
    </code>
    account we can upgrade to the latest release from the git repository by running:
   </p>
   <pre><code>$ cd microblog
$ git pull
$ DATABASE_URL=mysql://apps:apps@localhost/apps ./db_upgrade.py
$ ./tr_compile.py
</code></pre>
   <p>
    The
    <code>
     git pull
    </code>
    operation downloads any new or updated files from our git server. We then upgrade our database and recompile our translation files, in case any of those need updating. That's it!
   </p>
   <p>
    Once we have the updates in place we need to tell apache to restart the FastCGI processes, and this gets a bit tricky, because we are logged in as user
    <code>
     apps
    </code>
    , an unprivileged account, while the FastCGI processes are owned by the
    <code>
     apache
    </code>
    user.
   </p>
   <p>
    For this we are going to use
    <code>
     sudo
    </code>
    . The
    <code>
     sudo
    </code>
    tool allows users to selectively run applications as other users. We don't really want to give our
    <code>
     apps
    </code>
    account a lot of power, we will limit it to just be able to send kill signals to the FastCGI processes started by the apache user.
   </p>
   <p>
    The
    <code>
     killpython
    </code>
    script that we have in the
    <code>
     microblog
    </code>
    directory does this work:
   </p>
   <pre><code>killall /home/apps/microblog/flask/bin/python
</code></pre>
   <p>
    The problem is, if we run this under the
    <code>
     apps
    </code>
    account we won't have permission to kill the processes owned by the
    <code>
     apache
    </code>
    user. To enable
    <code>
     apps
    </code>
    to kill these processes we have to make a small change in file
    <code>
     /etc/sudoers
    </code>
    :
   </p>
   <pre><code>apps    ALL=(apache) NOPASSWD:/home/apps/microblog/killpython
Defaults: apps    !requiretty
</code></pre>
   <p>
    Note you will need to make this change as user
    <code>
     root
    </code>
    , since
    <code>
     /etc/sudoers
    </code>
    is a system file.
   </p>
   <p>
    The first cryptic command gives the
    <code>
     apps
    </code>
    user permission to run the
    <code>
     killpython
    </code>
    command as user
    <code>
     apache
    </code>
    without having to provide a password. The second line allows
    <code>
     sudo
    </code>
    commands for user
    <code>
     apps
    </code>
    to be issued from a script in addition to doing it from an interactive console. You can read the man page for
    <code>
     sudoers
    </code>
    for detailed information on the syntax of
    <code>
     sudo
    </code>
    configuration file.
   </p>
   <p>
    Now when logged in as
    <code>
     apps
    </code>
    we can kill the python jobs as follows:
   </p>
   <pre><code>$ sudo -u apache ./killpython
</code></pre>
   <p>
    If the FastCGI processes are killed Apache will restart them the next time a request comes for
    <code>
     microblog
    </code>
    .
   </p>
   <p>
    To make upgrading our server a bit more simple we can write a client side script that upgrades and restarts all together. The script would run the following:
   </p>
   <pre><code>ssh apps@&lt;your-server&gt; "cd microblog;git pull;sudo -u apache ./killpython;DATABASE_URL=mysql://apps:apps@localhost/apps ./db_upgrade.py;./tr_compile.py"
</code></pre>
   <p>
    If you store the above line in a script then you can roll out an application upgrade with a single command!
   </p>
   <h3>
    What's left to do
   </h3>
   <p>
    I will not discuss a few more mundane operations that are recommended to make a server that is open to the hostile Internet world more secure. Things such as:
   </p>
   <ul>
    <li>
     Not allowing
     <code>
      root
     </code>
     remote logins
    </li>
    <li>
     Disabling any services that are not used, like FTP, CIFS, etc.
    </li>
    <li>
     Setting up a firewall
    </li>
    <li>
     Keep the server up to date on security fixes.
    </li>
    <li>
     Etc.
    </li>
   </ul>
   <p>
    I will leave these as an exercise to the interested reader, since they are largely unrelated to this tutorial.
   </p>
   <h2>
    Hosting on the Raspberry Pi
   </h2>
   <p>
    The
    <a href="http://www.raspberrypi.org/">
     Raspberry Pi
    </a>
    is a revolutionary little Linux computer that costs $35. It has very low power consumption so it is the perfect device to host a home based web application that can be online 24/7 without tying up a full blown computer.
   </p>
   <p>
    There are several Linux distributions that run on the Raspberry Pi. We'll set up our application on
    <a href="http://www.raspbian.org/">
     Raspbian
    </a>
    , the official distribution.
   </p>
   <p>
    As a side benefit, note that Raspbian is a derivative of Debian, so the instructions below will apply with little or no modification for Debian/Ubuntu based servers.
   </p>
   <p>
    We will now follow the same steps we followed for CentOS to get the RPi server setup.
   </p>
   <h3>
    Client side setup
   </h3>
   <p>
    A Raspberry Pi is a pretty decent computer to work in. You can connect an HDMI monitor, keyboard and mouse and work directly on it to configure our web server. Also like we did for CentOS or actually any other Linux distribution you can have the Raspberry Pi just connected to the network and then access it remotely from a PC over
    <code>
     ssh
    </code>
    . See the client side setup section above for CentOS for instructions on how to setup a client PC with
    <code>
     ssh
    </code>
    .
   </p>
   <p>
    Note that I will not cover how to install and setup the Raspberry Pi here, there are plenty of articles elsewhere for that. I will assume the Raspberry Pi is already running and connected to the network.
   </p>
   <h3>
    Installing software packages
   </h3>
   <p>
    Since the Pi is a limited power machine we will not do a full blown Apache/MySQL installation like we did for CentOS. Instead, we will take a lightweight approach. For web server we will use
    <a href="http://www.lighttpd.net/">
     Lighttpd
    </a>
    (pronounced "Lighty"), a small web server with a very good and efficient FastCGI implementation. For our database we will stay with sqlite.
   </p>
   <p>
    With CentOS we used
    <code>
     yum
    </code>
    to install packages. In Debian derivatives the package manager is called
    <code>
     apt-get
    </code>
    :
   </p>
   <pre><code>$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get install python python-dev python-virtualenv lighttpd git
</code></pre>
   <p>
    The
    <code>
     update
    </code>
    line downloads an updated package list to your Pi. The
    <code>
     upgrade
    </code>
    line upgrades all installed packages to their latest versions.  It is recommended that you issue these two commands regularly, to keep your Raspberry Pi's software up to date. Finally the
    <code>
     install
    </code>
    statement installs the packages that we need for our task.
   </p>
   <h3>
    Creating a user account to host the application
   </h3>
   <p>
    We said that we will assume our Raspberry Pi server will be in a trusted network. Since security is not a major concern we will not bother creating a dedicated account and instead will install the app directly on the default
    <code>
     pi
    </code>
    account.
   </p>
   <p>
    If your Raspberry Pi will be connected to the internet then you should follow the approach we used for CentOS and make a different account that has no privileges, as this ensure that if an intruder manages to access the account the damage that he or she can cause will be limited.
   </p>
   <h3>
    Password-less logins
   </h3>
   <p>
    Having a public key authentication procedure is also less important if we assume the application will run on a small intranet, but should you need such functionality the procedure is identical to what we did for the CentOS system.
   </p>
   <h3>
    Installing the application
   </h3>
   <p>
    The application installs very easily, again using
    <code>
     git
    </code>
    :
   </p>
   <pre><code>$ git clone git://github.com/miguelgrinberg/microblog.git
$ cd microblog
</code></pre>
   <h3>
    Initializing the application
   </h3>
   <p>
    Since we will be using a sqlite database in this host we can go ahead and initialize
    <code>
     microblog
    </code>
    as we have done in past articles for our development server:
   </p>
   <pre><code>$ virtualenv flask
$ flask/bin/pip install -r requirements.txt
% flask/bin/pip install mysql-python
$ ./db_create.py
$ ./tr_compile.py
</code></pre>
   <p>
    Note that the
    <code>
     setup.py
    </code>
    script will try to install the MySQL support and that will fail, but this is all right since we will not use it.
   </p>
   <p>
    The files were all checked out under the
    <code>
     pi
    </code>
    user ownership. But as we have seen for CentOS, the web server on the Pi will run under a different account. Since security isn't a concern for this server, we will take a much simpler approach:
   </p>
   <pre><code>$ chmod -R 777 *
</code></pre>
   <p>
    The above
    <code>
     chmod
    </code>
    statement makes all the files writable by all users. Again, this would be a really bad thing to do on an open server, but for a server where you have full control it saves you from the trouble of dealing with user permissions.
   </p>
   <p>
    I want to make it clear that the Raspberry Pi is perfectly capable of supporting a configuration based on user groups and user permissions similar to what we created above for the CentOS box. We are choosing this simplified setup because we will be using this server in a controlled environment.
   </p>
   <h3>
    Setting up Lighttpd
   </h3>
   <p>
    Lighttpd comes with native support for FastCGI, so we do not need to worry about installing a separate module for it.
   </p>
   <p>
    All we need to do is append the definition of our website to the configuration file, which is located at
    <code>
     /etc/lighttpd/lighttpd.conf
    </code>
    :
   </p>
   <pre><code>fastcgi.server = ("/microblog" =&gt;
    ((
        "socket" =&gt; "/tmp/microblog-fcgi.sock",
        "bin-path" =&gt; "/home/pi/microblog/runp-sqlite.fcgi",
        "check-local" =&gt; "disable",
        "max-procs" =&gt; 1
    ))
)

alias.url = (
    "/microblog/static/" =&gt; "/home/pi/microblog/app/static/",
)
</code></pre>
   <p>
    And with this our application should be online at
    <code>
     http://aaa.bbb.ccc.ddd/microblog
    </code>
    , with
    <code>
     aaa.bbb.ccc.ddd
    </code>
    being the IP address of your Raspberry Pi.
   </p>
   <p>
    But there are a few things to note in the above configuration, and also a couple of things that didn't initially work and required some changes in the application side.
   </p>
   <p>
    The
    <code>
     fastcgi.server
    </code>
    statement is the one that defines the behavior of our FastCGI server, which we are exposing under the
    <code>
     /microblog
    </code>
    URL. The reason we are not exposing the application at the root URL is simple, we may want to host more than one application, so putting all the URLs under a
    <code>
     /microblog
    </code>
    root effectively works as a namespace.
   </p>
   <p>
    Inside the FastCGI definition we provide a socket name in the
    <code>
     /tmp
    </code>
    directory and the path to our
    <code>
     runp-sqlite.fcgi
    </code>
    file, which Lighttpd will execute to start up FastCGI processes. The
    <code>
     check-local
    </code>
    option tells Lighttpd to send requests to the FastCGI server even if the request path matches a file on disk. The
    <code>
     max-procs
    </code>
    limits the number of FastCGI processes to 1, which for a small server is enough and avoids potential problems with multiple concurrent writers to the sqlite database.
   </p>
   <p>
    The
    <code>
     alias.url
    </code>
    section provides the mapping that enables Lighttpd to server our static files. The alias maps any requests for
    <code>
     /microblog/static/...
    </code>
    to the correct location on disk where we store our static files.
   </p>
   <p>
    The
    <code>
     runp-sqlite.fcgi
    </code>
    script is pretty much the same as the one we used for CentOS, but without overriding the database setting:
   </p>
   <pre><code>from flipflop import WSGIServer
from app import app

if __name__ == '__main__':
    WSGIServer(app).run()
</code></pre>
   <h3>
    Some necessary fixes
   </h3>
   <p>
    Testing this setup reveals a couple of bugs in our application.
   </p>
   <p>
    First, our javascript and css static files are not being served. The problem becomes evident after inspecting the HTML source of the login page. The
    <code>
     base.html
    </code>
    template references these files via hardcoded paths that begin with
    <code>
     /static
    </code>
    , but we said are putting this application inside a
    <code>
     /microblog
    </code>
    prefix. For example, see how we had the link to the CSS file:
   </p>
   <pre><code>&lt;link href="/static/css/bootstrap.min.css" rel="stylesheet" media="screen"&gt;
</code></pre>
   <p>
    Here we really want
    <code>
     /microblog/static/bootstrap.min.css
    </code>
    , but of course we can't add
    <code>
     /microblog
    </code>
    to the
    <code>
     base.html
    </code>
    file because that will break the development server that runs on our PC. The solution is to let Flask generate these URLs using our old friend
    <code>
     url_for
    </code>
    :
   </p>
   <pre><code>&lt;link href="{{ url_for('.static', filename='css/bootstrap.min.css') }}" rel="stylesheet" media="screen"&gt;
</code></pre>
   <p>
    After updating all the js and css files as above the site serves the login page with all the auxiliary static files.
   </p>
   <p>
    But trying to login reveals another problem, Right after logging in we get a 500 error code. Luckily  for us we have logging, so a quick look at
    <code>
     /home/pi/microblog/tmp/microblog.log
    </code>
    shows the following error:
   </p>
   <pre><code>ProgrammingError: (ProgrammingError) SQLite objects created in a thread can only be used in that same thread.The object was created in thread id -1260325776 and this is thread id -1243548560
</code></pre>
   <p>
    What is this? We are not running multiple threads ourselves but obviously there are multiple threads in our application. The only difference between our development server and this one is that we are now using
    <code>
     flipflop
    </code>
    for the FastCGI server. Looking at the code in this module we can easily find that by default
    <code>
     flipflop
    </code>
    runs a multithreaded web server.
   </p>
   <p>
    A possible solution would be to use the single-threaded FastCGI server from
    <code>
     flipflop
    </code>
    but that could affect the performance if the server will have multiple concurrent users. Another, more interesting way to handle this problem is to enable threading in
    <code>
     sqlite
    </code>
    (which appears to be
    <a href="http://www.sqlite.org/threadsafe.html">
     fully supported
    </a>
    ). Multithreading can be enabled in SQLAlchemy by setting the
    <code>
     check_same_thread
    </code>
    option to
    <code>
     False
    </code>
    in our
    <code>
     config.py
    </code>
    configuration file:
   </p>
   <pre><code>SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'app.db') + '?check_same_thread=False'
</code></pre>
   <p>
    With this change we are allowing multiple threads to make changes to the database, the sqlite library takes care of synchronizing multiple accesses.
   </p>
   <p>
    And with these small changes we have a fully enabled web application running on our Raspberry Pi!
   </p>
   <h3>
    Installing application updates
   </h3>
   <p>
    To deploy application updates we can just login to the Raspberry Pi and issue the commands that update the source files, database and translation files:
   </p>
   <pre><code>$ cd microblog
$ git pull
$ ./db_upgrade.py
$ ./tr_compile.py
</code></pre>
   <p>
    If you setup password-less login to your Pi then of course you can write a script wrapper that does all this in a single command.
   </p>
   <h2>
    Final words
   </h2>
   <p>
    The updated application is available, as always, on my
    <a href="https://github.com/miguelgrinberg/microblog/tree/version-0.17">
     github page
    </a>
    . Alternatively you can download it as a zip file below:
   </p>
   <p>
    Download
    <a href="https://github.com/miguelgrinberg/microblog/archive/version-0.17.zip">
     microblog 0.17
    </a>
    .
   </p>
   <p>
    In the next article we will be looking at deployment on cloud services as an alternative to the traditional options we explored today.
   </p>
   <p>
    I will see you then. Thank you!
   </p>
   <p>
    Miguel
   </p>
  </div>
  <div class="social-bar">
   <table>
    <tr>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <a class="twitter-share-button" data-count="vertical" data-url="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi" data-via="miguelgrinberg" href="https://twitter.com/share">
        Tweet
       </a>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-left: 6px;">
       <div class="fb-like" data-font="verdana" data-href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi" data-layout="box_count" data-send="false" data-show-faces="false" data-width="450">
       </div>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <g:plusone href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi" size="tall">
       </g:plusone>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <script data-counter="top" data-url="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi" type="IN/Share">
       </script>
      </div>
     </td>
    </tr>
   </table>
  </div>
  <h4 style="text-align: right">
   <a name="comments">
   </a>
   81 comments
  </h4>
  <div class="comment">
   <ul>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/cd6bc9bc458494d9fa8b77f9dbecb55b?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #1
       </span>
       <span class="label label-primary">
        Laurent Rivard
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-20T22:14:26Z">
        2013-06-20T22:14:26Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        When I try to connect to the mySQL tool. I haven't set any password, but I get the error 
&lt;code&gt; 
ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)
&lt;/code&gt; 

Any ideas?

Thanks a lot for the tutorial, I really enjoyed it!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #2
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-21T01:36:58Z">
        2013-06-21T01:36:58Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Laurent: chances are the MySQL service isn't running, or it is running but its socket file is incorrectly set. If you google the error message you will find lots of ideas on how to debug this.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/db530b099572fc86872f6e0bfa3c64e2?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #3
       </span>
       <span class="label label-primary">
        Theladdie
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-24T10:55:59Z">
        2013-06-24T10:55:59Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Can you help me. I have tried the setup for the raspberry pi and I ammended the lighttpd.conf and restarted the server but I am not able to get the page... Just 404 not found.

I got the microblog from git and ran setup, db_create and tr_compile

But now I am lost
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #4
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-25T03:52:38Z">
        2013-06-25T03:52:38Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Theladdie: did you check the lighttpd logs for errors? I can't really tell you what's wrong, either the configuration does not point to the place where microblog is installed, or maybe you are using the wrong URLs, I would try to get lighttpd to server regular files first to make sure it is working.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/1d31e478e592727f19ba1247eb5d10f1?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #5
       </span>
       <span class="label label-primary">
        Marc Vanelverdinghe
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-07-24T18:14:49Z">
        2013-07-24T18:14:49Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Thank you for this tutorial whiwh is invaluable as for me Flask is totally new.
I have a project where I want to use the Raspberry PI's Piface board from the internet. when including "import piface.pfio " I get an error that this module is not found. How do I add this module to the virtual environment? When starting the standard Python version importing the piface module is not a problem. Any ideas?
Thanks!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #6
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-07-25T05:41:19Z">
        2013-07-25T05:41:19Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Marc: you have two options. You can install piface in your virtual environment along with Flask, or you can create the virtual environment passing --system-site-packages as argument to virtualenv. This option makes the packages installed globally also visible to the virtual environment.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/f7d6dbe9db22232d13b501c203946bf4?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #7
       </span>
       <span class="label label-primary">
        Thai Nguyen
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-08-08T05:34:17Z">
        2013-08-08T05:34:17Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        really great mega guide Miguel and i am glad that i found your blog. i am currently at part 5 of your guide. do you have by any chance an example of where you connect to a MS SQL-Server 2008 using slqalchemy?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #8
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-08-08T05:38:40Z">
        2013-08-08T05:38:40Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Thai: with SQLAlchemy it does not really matter which database you use, all implement the same model setup and operations.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/f7d6dbe9db22232d13b501c203946bf4?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #9
       </span>
       <span class="label label-primary">
        Thai Nguyen
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-08-09T02:18:21Z">
        2013-08-09T02:18:21Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        you are absolutely right with regards to the db conn. setup. it was more straight forward then anticipated. again thank you for writing up this very helpful guide!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/5a498023963aae01fe9df0721e57ce69?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #10
       </span>
       <span class="label label-primary">
        <a href="www.maxmath.nl">
         Rob Juffermans
        </a>
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-10-09T13:22:30Z">
        2013-10-09T13:22:30Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel,

I think you should update setup.py with:

subprocess.call([os.path.join('flask', bin, 'pip'), 'install', 'flask-wtf&lt;0.9.0'])

Otherwise you could get:
ImportError: No module named flask.ext.wtf.TextField
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/46b641602eceab18119be7a6034916c5?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #11
       </span>
       <span class="label label-primary">
        ryan
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-10-31T20:33:19Z">
        2013-10-31T20:33:19Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Miguel, thanks for the great tutorial. I was able to follow you all the way through except to the point of setting up the httpd in centos. No matter how hard i tried, i cant get the service running. it always shows the service as dead. Any ideas. i enabled most causes like SElenux, firewall, and what ever help i could get from other forums.
thanks and best regards
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/46b641602eceab18119be7a6034916c5?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #12
       </span>
       <span class="label label-primary">
        ryan
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-10-31T21:35:27Z">
        2013-10-31T21:35:27Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        hi Miguel
want to add one information for you. I can get the httpd run with out any problem until i configure mod_fcigd 
hope this helps you
regards
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/46b641602eceab18119be7a6034916c5?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #13
       </span>
       <span class="label label-primary">
        ryan
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-11-01T11:50:57Z">
        2013-11-01T11:50:57Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        hi Miguel,
continuing my update.
after much reading i was able to make my httpd service run with fcgi. But then i got hit with this problem.

[Fri Nov 01 07:32:41 2013] [error] [client 127.0.0.1] script not found or unable to stat: /home/apps/microblog/runp-mysql.fcgilogin

any thoughts
thanks
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/46b641602eceab18119be7a6034916c5?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #14
       </span>
       <span class="label label-primary">
        ryan
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-11-01T12:24:44Z">
        2013-11-01T12:24:44Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        hi Miguel,
my update, with a smile.
I was able to finally deploy successfully on centos
thank you
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/00eab3daf7e7fc63fdd6bcfe0d2a5968?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #15
       </span>
       <span class="label label-primary">
        jeromef
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-11-21T17:30:36Z">
        2013-11-21T17:30:36Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Thanx a lot Rob !
But i actually have a problem, i only get the header (title "microblog" and "home" link).... then a "File not found" 
In the code it seems that the {% block content %}{% endblock %} is where the code stop... any suggestion ?

i forget to mentionned how impressed im by this tuto... and wait for the book !
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #16
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-11-21T17:47:57Z">
        2013-11-21T17:47:57Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @jeromef: you can download my version of the code and compare against yours to find the problem.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/00eab3daf7e7fc63fdd6bcfe0d2a5968?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #17
       </span>
       <span class="label label-primary">
        jeromef
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-11-22T11:21:20Z">
        2013-11-22T11:21:20Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Moreover for a good deployment (enabling fast cgi) on raspberry i had to add this line in the /etc/lighttpd/lighttpd.conf :

include "/etc/lighttpd/conf-available/10-fastcgi.conf"

but always only the header and no content block (File Not Found)... any help ?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/da9e1b1c139b8761d31a265b34721375?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #18
       </span>
       <span class="label label-primary">
        rm
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-12-23T14:45:00Z">
        2013-12-23T14:45:00Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel, thank you for this.
Was wondering how you implement roles into the system. Specifically, some best practices for it, perhaps even a way to structure applications for it. I'm guessing the templates could have a series of &lt;if ROLE&gt; then &lt;&gt;, but there must be a better way to do this?
Thanks.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #19
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-12-23T17:44:48Z">
        2013-12-23T17:44:48Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @rm: I did not go into a lot of detail on that on this tutorial, but I actually have an entire chapter of the coming book where I show a possible implementation of user roles. How you embed this into the application depends. Sometimes you have to use conditionals in templates, so that you can use the same template for, say, admins and non-admins. Other times you can use a decorator that only allows the specified roles into the view function. For roles that apply to an entire blueprint you can add a before_request function that checks the role. Hope this helps!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/59d6b2ae9b8c9a808658d8ea75fec4d7?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #20
       </span>
       <span class="label label-primary">
        <a href="corygough.com">
         Cory Gough
        </a>
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2014-01-21T01:30:15Z">
        2014-01-21T01:30:15Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Miguel:  I'm trying to deploy on my Pi, but when I run runp-sqlite.fcgi I get the following message:
WSGIServer: missing FastCGI param REQUEST_METHOD required by WSGI!
WSGIServer: missing FastCGI param SERVER_NAME required by WSGI!
WSGIServer: missing FastCGI param SERVER_PORT required by WSGI!
WSGIServer: missing FastCGI param SERVER_PROTOCOL required by WSGI!
.... and then a lot of stack traces. 

Do you know what might be causing this?  Thank you for your continuing help.  I'm looking forward to getting this up and running!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/59d6b2ae9b8c9a808658d8ea75fec4d7?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #21
       </span>
       <span class="label label-primary">
        <a href="corygough.com">
         Cory Gough
        </a>
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2014-01-30T02:47:33Z">
        2014-01-30T02:47:33Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Miguel:  When I created my db I ran: DATABASE_URL=mysql://apps:apps@localhost/apps ./db_create.py

I think I was supposed to do: DATABASE_URL=mysql://apps:&lt;my_password&gt;@localhost/apps

Now when I run the application it tries to store the first user, but says this in the log: ProgrammingError: (ProgrammingError) (1146, "Table 'apps.user' doesn't exist").

Do you know what is causing this?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #22
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2014-01-30T05:36:36Z">
        2014-01-30T05:36:36Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Cory: did the db_create.py command finish without errors? It appears it did not create the tables. Note that using "apps" as a password was for example purposes, you are correct in that you need to replace it with a more secure password.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/59d6b2ae9b8c9a808658d8ea75fec4d7?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #23
       </span>
       <span class="label label-primary">
        <a href="corygough.com">
         Cory Gough
        </a>
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2014-01-31T01:44:54Z">
        2014-01-31T01:44:54Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Miguel:  db_create.py ran without errors.  When I setup mysql  I used my own password.  But when I ran db_create.py I set the DATABASE_URL to the apps password in your example.  I didn't realize I needed to change it until later (not sure if that is the issue).  Is there a way to recreate the db or something else that can be done?

When I rerun db_create.py is says: 
migrate.exceptions.DatabaseAlreadyControlledError
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #24
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2014-01-31T01:54:19Z">
        2014-01-31T01:54:19Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Cory: Delete the database and recreate it using your favorite mysql admin tool. It seems it is currently in a bad state where the migration information is there but the tables are not.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/59d6b2ae9b8c9a808658d8ea75fec4d7?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #25
       </span>
       <span class="label label-primary">
        <a href="corygough.com and http://172.245.128.156/index">
         Cory Gough
        </a>
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2014-02-01T19:54:24Z">
        2014-02-01T19:54:24Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Miguel:  Turns out this was a simple one!  When setting the DATABASE_URL I needed to export it so that the db_create.py script would see it.  Otherwise, it didn't see it and was just creating a sqlite db.  The good news is I just made my first post on my VPS!  

Thank you for helping me through your tutorial and taking the time to make it!  I look foward to your book and continuing to expand on my own microblog!

PS(if it helps anyone) I also made the following changes from the github code to get it working for me:
Add "import os" to runp-mysql.fcgi
flask/bin/pip install MySQL-python; Because it was not in the setup script.
flask/bin/pip uninstall Flask
flask/bin/pip install Flask==0.9
Reference https://github.com/miguelgrinberg/microblog/issues/4
       </p>
      </div>
     </div>
    </li>
   </ul>
  </div>
  <div class="page">
   <ul class="pager">
    <li class="previous disabled">
     <a href="#">
      ««
     </a>
    </li>
    <li class="previous disabled">
     <a href="#">
      «
     </a>
    </li>
    <li class="next">
     <a href="/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi/page/0#comments">
      »»
     </a>
    </li>
    <li class="next">
     <a href="/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi/page/2#comments">
      »
     </a>
    </li>
   </ul>
  </div>
  <h3>
   <a name="commentform">
   </a>
   Leave a Comment
  </h3>
  <form action="#commentform" class="form" method="post" role="form">
   <div style="display:none;">
    <input id="csrf_token" name="csrf_token" type="hidden" value="1452908256.06##fd3be727d39e8c6435ff2531c4fe2092060ccce0"/>
   </div>
   <div class="form-group ">
    <label class="control-label" for="name">
     Name
    </label>
    <input class="form-control" id="name" name="name" required="" type="text" value=""/>
   </div>
   <div class="form-group ">
    <label class="control-label" for="url">
     URL
    </label>
    <input class="form-control" id="url" name="url" type="text" value=""/>
   </div>
   <div class="form-group ">
    <label class="control-label" for="email">
     Email
    </label>
    <input class="form-control" id="email" name="email" required="" type="text" value=""/>
   </div>
   <div class="form-group ">
    <label class="control-label" for="comment">
     Comment
    </label>
    <textarea class="form-control" id="comment" name="comment" required="">
    </textarea>
   </div>
   <div class="form-group ">
    <label class="control-label" for="captcha">
     Captcha
    </label>
    <script type="text/javascript">
     var RecaptchaOptions = {"custom_translations": {"audio_challenge": "Get an audio challenge", "cant_hear_this": "Download sound as MP3", "help_btn": "Help", "image_alt_text": "reCAPTCHA challenge image", "incorrect_try_again": "Incorrect. Try again.", "instructions_audio": "Type what you hear", "instructions_visual": "Type the text", "play_again": "Play sound again", "privacy_and_terms": "Privacy & Terms", "refresh_btn": "Get a new challenge", "visual_challenge": "Get a visual challenge"}, "theme": "white"};
    </script>
    <script src="//www.google.com/recaptcha/api/challenge?k=6Ld5Zs4SAAAAAOY0DOi4r18bgHlEaz41qAoRf__S" type="text/javascript">
    </script>
    <noscript>
     <iframe frameborder="0" height="300" src="//www.google.com/recaptcha/api/noscript?k=6Ld5Zs4SAAAAAOY0DOi4r18bgHlEaz41qAoRf__S" width="500">
     </iframe>
     <br/>
     <textarea cols="40" name="recaptcha_challenge_field" rows="3">
     </textarea>
     <input name="recaptcha_response_field" type="hidden" value="manual_challenge"/>
    </noscript>
   </div>
   <input class="btn btn-default" id="submit" name="submit" type="submit" value="Submit"/>
  </form>
 </div>
</div>

    </html>
    