
    <!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>The Flask Mega-Tutorial</title>
    <link href="style.css" rel="stylesheet" type="text/css" />
    </head>
    <div id="main">
 <div class="post">
  <p class="date">
   <span class="flask-moment" data-format="format('LL')" data-refresh="0" data-timestamp="2012-05-20T07:30:21Z">
    2012-05-20T07:30:21Z
   </span>
  </p>
  <h1 class="post-title">
   <a href="/post/the-flask-mega-tutorial-part-iv-database">
    The Flask Mega-Tutorial, Part IV: Database
   </a>
  </h1>
  <div class="post_body">
   <p>
    This is the fourth article in the series in which I document my experience writing web applications in
    <a href="http://python.org">
     Python
    </a>
    using the
    <a href="http://flask.pocoo.org">
     Flask
    </a>
    microframework.
   </p>
   <p>
    The goal of the tutorial series is to develop a decently featured microblogging application that demonstrating total lack of originality I have decided to call
    <code>
     microblog
    </code>
    .
   </p>
   <p>
    <strong>
     NOTE
    </strong>
    : This article was revised in September 2014 to be in sync with current versions of Python and Flask.
   </p>
   <p>
    Here is an index of all the articles in the series that have been published to date:
   </p>
   <ul>
    <li>
     <a href="the-flask-mega-tutorial-part-i-hello-world">
      Part I: Hello, World!
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-ii-templates">
      Part II: Templates
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-iii-web-forms">
      Part III: Web Forms
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-iv-database">
      Part IV: Database
     </a>
     (this article)
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-v-user-logins">
      Part V: User Logins
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-vi-profile-page-and-avatars">
      Part VI: Profile Page And Avatars
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-vii-unit-testing">
      Part VII: Unit Testing
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-viii-followers-contacts-and-friends">
      Part VIII: Followers, Contacts And Friends
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-ix-pagination">
      Part IX: Pagination
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-x-full-text-search">
      Part X: Full Text Search
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xi-email-support">
      Part XI: Email Support
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xii-facelift">
      Part XII: Facelift
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xiii-dates-and-times">
      Part XIII: Dates and Times
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xiv-i18n-and-l10n">
      Part XIV: I18n and L10n
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xv-ajax">
      Part XV: Ajax
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xvi-debugging-testing-and-profiling">
      Part XVI: Debugging, Testing and Profiling
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi">
      Part XVII: Deployment on Linux (even on the Raspberry Pi!)
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud">
      Part XVIII: Deployment on the Heroku Cloud
     </a>
    </li>
   </ul>
   <h2>
    Recap
   </h2>
   <p>
    In the previous chapter of the series we created our login form, complete with submission and validation.
   </p>
   <p>
    In this article we are going to create our database and set it up so that we can record our users in it.
   </p>
   <p>
    To follow this chapter along you need to have the
    <code>
     microblog
    </code>
    app as we left it at the end of the previous chapter. Please make sure the app is installed and running.
   </p>
   <h2>
    Running Python scripts from the command line
   </h2>
   <p>
    In this chapter we are going to write a few scripts that simplify the management of our database. Before we get into that let's review how a Python script is executed on the command line.
   </p>
   <p>
    If you are on Linux or OS X, then scripts have to be given executable permission, like this:
   </p>
   <pre><code>$ chmod a+x script.py
</code></pre>
   <p>
    The script has a
    <a href="http://en.wikipedia.org/wiki/Shebang_(Unix)">
     shebang
    </a>
    line, which points to the interpreter that should be used. A script that has been given executable permission and has a shebang line can be executed simply like this:
   </p>
   <pre><code>./script.py &lt;arguments&gt;
</code></pre>
   <p>
    On Windows, however, this does not work, and instead you have to provide the script as an argument to the chosen Python interpreter:
   </p>
   <pre><code>$ flask\Scripts\python script.py &lt;arguments&gt;
</code></pre>
   <p>
    To avoid having to type the path to the Python interpreter you can add your
    <code>
     microblog/flask/Scripts
    </code>
    directory to the system path, making sure it appears before your regular Python interpreter. This can be temporarily achieved by activating the virtual environment with the following command:
   </p>
   <pre><code>$ flask\Scripts\activate
</code></pre>
   <p>
    From now on, in this tutorial the Linux/OS X syntax will be used for brevity. If you are on Windows remember to convert the syntax appropriately.
   </p>
   <h2>
    Databases in Flask
   </h2>
   <p>
    We will use the
    <a href="http://packages.python.org/Flask-SQLAlchemy">
     Flask-SQLAlchemy
    </a>
    extension to manage our application. This extension provides a wrapper for the
    <a href="http://www.sqlalchemy.org">
     SQLAlchemy
    </a>
    project, which is an
    <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">
     Object Relational Mapper
    </a>
    or ORM.
   </p>
   <p>
    ORMs allow database applications to work with objects instead of tables and SQL. The operations performed on the objects are translated into database commands transparently by the ORM. Knowing SQL can be very helpful when working with ORMs, but we will not be learning SQL in this tutorial, we will let Flask-SQLAlchemy speak SQL for us.
   </p>
   <h2>
    Migrations
   </h2>
   <p>
    Most database tutorials I've seen cover creation and use of a database, but do not adequately address the problem of updating a database as the application grows. Typically you end up having to delete the old database and create a new one each time you need to make updates, losing all the data. And if the data cannot be recreated easily you may be forced to write export and import scripts yourself.
   </p>
   <p>
    Luckily, we have a much better option.
   </p>
   <p>
    We are going to use
    <a href="http://code.google.com/p/sqlalchemy-migrate">
     SQLAlchemy-migrate
    </a>
    to keep track of database updates for us. It adds a bit of work to get a database started, but that is a small price to pay for never having to worry about manual database migrations.
   </p>
   <p>
    Enough theory, let's get started!
   </p>
   <h2>
    Configuration
   </h2>
   <p>
    For our little application we will use a sqlite database. The sqlite databases are the most convenient choice for small applications, as each database is stored in a single file and there is no need to start a database server.
   </p>
   <p>
    We have a couple of new configuration items to add to our config file (file
    <code>
     config.py
    </code>
    ):
   </p>
   <pre><code>import os
basedir = os.path.abspath(os.path.dirname(__file__))

SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'app.db')
SQLALCHEMY_MIGRATE_REPO = os.path.join(basedir, 'db_repository')
</code></pre>
   <p>
    The SQLALCHEMY_DATABASE_URI is required by the Flask-SQLAlchemy extension. This is the path of our database file.
   </p>
   <p>
    The SQLALCHEMY_MIGRATE_REPO is the folder where we will store the SQLAlchemy-migrate data files.
   </p>
   <p>
    Finally, when we initialize our app we also need to initialize our database. Here is our updated package init file (file
    <code>
     app/__init__.py
    </code>
    ):
   </p>
   <pre><code>from flask import Flask
from flask.ext.sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config.from_object('config')
db = SQLAlchemy(app)

from app import views, models
</code></pre>
   <p>
    Note the two changes we have made to our init script. We are now creating a
    <code>
     db
    </code>
    object that will be our database, and we are also importing a new module called
    <code>
     models
    </code>
    . We will write this module next.
   </p>
   <h2>
    The database model
   </h2>
   <p>
    The data that we will store in our database will be represented by a collection of classes that are referred to as the database models. The ORM layer will do the translations required to map objects created from these classes into rows in the proper database table.
   </p>
   <p>
    Let's start by creating a model that will represent our users. Using the
    <a href="http://ondras.zarovi.cz/sql/demo">
     WWW SQL Designer
    </a>
    tool, I have made the following diagram to represent our users table:
   </p>
   <p>
    <img alt="users table" src="/static/images/flask-mega-tutorial-part-iv-1.png"/>
   </p>
   <p>
    The
    <code>
     id
    </code>
    field is usually in all models, and is used as the
    <em>
     primary key
    </em>
    . Each user in the database will be assigned a unique id value, stored in this field. Luckily this is done automatically for us, we just need to provide the
    <code>
     id
    </code>
    field.
   </p>
   <p>
    The
    <code>
     nickname
    </code>
    and
    <code>
     email
    </code>
    fields are defined as strings (or VARCHAR in database jargon), and their maximum lengths are specified so that the database can optimize space usage.
   </p>
   <p>
    Now that we have decided what we want our users table to look like, the job of translating that into code is pretty easy (file
    <code>
     app/models.py
    </code>
    ):
   </p>
   <pre><code>from app import db

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nickname = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)

    def __repr__(self):
        return '&lt;User %r&gt;' % (self.nickname)
</code></pre>
   <p>
    The
    <code>
     User
    </code>
    class that we just created contains several fields, defined as class variables. Fields are created as instances of the
    <code>
     db.Column
    </code>
    class, which takes the field type as an argument, plus other optional arguments that allow us, for example, to indicate which fields are unique and indexed.
   </p>
   <p>
    The
    <code>
     __repr__
    </code>
    method tells Python how to print objects of this class. We will use this for debugging.
   </p>
   <h2>
    Creating the database
   </h2>
   <p>
    With the configuration and model in place we are now ready to create our database file. The SQLAlchemy-migrate package comes with command line tools and APIs to create databases in a way that allows easy updates in the future, so that is what we will use. I find the command line tools a bit awkward to use, so instead I have written my own set of little Python scripts that invoke the migration APIs.
   </p>
   <p>
    Here is a script that creates the database (file
    <code>
     db_create.py
    </code>
    ):
   </p>
   <pre><code>#!flask/bin/python
from migrate.versioning import api
from config import SQLALCHEMY_DATABASE_URI
from config import SQLALCHEMY_MIGRATE_REPO
from app import db
import os.path
db.create_all()
if not os.path.exists(SQLALCHEMY_MIGRATE_REPO):
    api.create(SQLALCHEMY_MIGRATE_REPO, 'database repository')
    api.version_control(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
else:
    api.version_control(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, api.version(SQLALCHEMY_MIGRATE_REPO))
</code></pre>
   <p>
    Note how this script is completely generic. All the application specific pathnames are imported from the config file. When you start your own project you can just copy the script to the new app's directory and it will work right away.
   </p>
   <p>
    To create the database you just need to execute this script (remember that if you are on Windows the command is slightly different):
   </p>
   <pre><code>./db_create.py
</code></pre>
   <p>
    After you run the command you will have a new
    <code>
     app.db
    </code>
    file. This is an empty sqlite database, created from the start to support migrations. You will also have a
    <code>
     db_repository
    </code>
    directory with some files inside. This is the place where SQLAlchemy-migrate stores its data files. Note that we do not regenerate the repository if it already exists. This will allow us to recreate the database while leaving the existing repository if we need to.
   </p>
   <h2>
    Our first migration
   </h2>
   <p>
    Now that we have defined our model, we can incorporate it into our database. We will consider any changes to the structure of the app database a
    <em>
     migration
    </em>
    , so this is our first, which will take us from an empty database to a database that can store users.
   </p>
   <p>
    To generate a migration I use another little Python helper script (file
    <code>
     db_migrate.py
    </code>
    ):
   </p>
   <pre><code>#!flask/bin/python
import imp
from migrate.versioning import api
from app import db
from config import SQLALCHEMY_DATABASE_URI
from config import SQLALCHEMY_MIGRATE_REPO
v = api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
migration = SQLALCHEMY_MIGRATE_REPO + ('/versions/%03d_migration.py' % (v+1))
tmp_module = imp.new_module('old_model')
old_model = api.create_model(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
exec(old_model, tmp_module.__dict__)
script = api.make_update_script_for_model(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, tmp_module.meta, db.metadata)
open(migration, "wt").write(script)
api.upgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
v = api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
print('New migration saved as ' + migration)
print('Current database version: ' + str(v))
</code></pre>
   <p>
    The script looks complicated, but it doesn't really do much. The way SQLAlchemy-migrate creates a migration is by comparing the structure of the database (obtained in our case from file
    <code>
     app.db
    </code>
    ) against the structure of our models (obtained from file
    <code>
     app/models.py
    </code>
    ). The differences between the two are recorded as a migration script inside the migration repository. The migration script knows how to apply a migration or undo it, so it is always possible to upgrade or downgrade a database format.
   </p>
   <p>
    While I have never had problems generating migrations automatically with the above script, I could see that sometimes it would be hard to determine what changes were made just by comparing the old and the new format. To make it easy for SQLAlchemy-migrate to determine the changes I never rename existing fields, I limit my changes to adding or removing models or fields, or changing types of existing fields. And I always review the generated migration script to make sure it is right.
   </p>
   <p>
    It goes without saying that you should never attempt to migrate your database without having a backup, in case something goes wrong. Also never run a migration for the first time on a production database, always make sure the migration works correctly on a development database.
   </p>
   <p>
    So let's go ahead and record our migration:
   </p>
   <pre><code>$ ./db_migrate.py
</code></pre>
   <p>
    And the output from the script will be:
   </p>
   <pre><code>New migration saved as db_repository/versions/001_migration.py
Current database version: 1
</code></pre>
   <p>
    The script shows where the migration script was stored, and also prints the current database version. The empty database version was version 0, after we migrated to include users we are at version 1.
   </p>
   <h2>
    Database upgrades and downgrades
   </h2>
   <p>
    By now you may be wondering why is it that important to go through the extra hassle of recording database migrations.
   </p>
   <p>
    Imagine that you have your application in your development machine, and also have a copy deployed to a production server that is online and in use.
   </p>
   <p>
    Let's say that for the next release of your app you have to introduce a change to your models, for example a new table needs to be added. Without migrations you would need to figure out how to change the format of your database, both in your development machine and then again in your server, and this could be a lot of work.
   </p>
   <p>
    If you have database migration support, then when you are ready to release the new version of the app to your production server you just need to record a new migration, copy the migration scripts to your production server and run a simple script that applies the changes for you. The database upgrade can be done with this little Python script (file
    <code>
     db_upgrade.py
    </code>
    ):
   </p>
   <pre><code>#!flask/bin/python
from migrate.versioning import api
from config import SQLALCHEMY_DATABASE_URI
from config import SQLALCHEMY_MIGRATE_REPO
api.upgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
v = api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
print('Current database version: ' + str(v))
</code></pre>
   <p>
    When you run the above script, the database will be upgraded to the latest revision, by applying the migration scripts stored in the database repository.
   </p>
   <p>
    It is not a common need to have to downgrade a database to an old format, but just in case, SQLAlchemy-migrate supports this as well (file
    <code>
     db_downgrade.py
    </code>
    ):
   </p>
   <pre><code>#!flask/bin/python
from migrate.versioning import api
from config import SQLALCHEMY_DATABASE_URI
from config import SQLALCHEMY_MIGRATE_REPO
v = api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
api.downgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, v - 1)
v = api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
print('Current database version: ' + str(v))
</code></pre>
   <p>
    This script will downgrade the database one revision. You can run it multiple times to downgrade several revisions.
   </p>
   <h2>
    Database relationships
   </h2>
   <p>
    Relational databases are good at storing relations between data items. Consider the case of a user writing a blog post. The user will have a record in the
    <code>
     users
    </code>
    table, and the post will have a record in the
    <code>
     posts
    </code>
    table. The most efficient way to record who wrote a given post is to link the two related records.
   </p>
   <p>
    Once a link between a user and a post is established there are two types of queries that we may need to use. The most trivial one is when you have a blog post and need to know what user wrote it. A more complex query is the reverse of this one. If you have a user, you may want to know all the posts that the user wrote. Flask-SQLAlchemy will help us with both types of queries.
   </p>
   <p>
    Let's expand our database to store posts, so that we can see relationships in action. For this we go back to our database design tool and create a
    <code>
     posts
    </code>
    table:
   </p>
   <p>
    <img alt="users table" src="/static/images/flask-mega-tutorial-part-iv-2.png"/>
   </p>
   <p>
    Our
    <code>
     posts
    </code>
    table will have the required
    <code>
     id
    </code>
    , the
    <code>
     body
    </code>
    of the post and a
    <code>
     timestamp
    </code>
    . Not much new there. But the
    <code>
     user_id
    </code>
    field deserves an explanation.
   </p>
   <p>
    We said we wanted to link users to the posts that they write. The way to do that is by adding a field to the post that contains the
    <code>
     id
    </code>
    of the user that wrote it. This
    <code>
     id
    </code>
    is called a
    <em>
     foreign key
    </em>
    . Our database design tool shows foreign keys as a link between the foreign key and the
    <code>
     id
    </code>
    field of the table it refers to. This kind of link is called a one-to-many relationship,
    <em>
     one
    </em>
    user writes
    <em>
     many
    </em>
    posts.
   </p>
   <p>
    Let's modify our models to reflect these changes (
    <code>
     app/models.py
    </code>
    ):
   </p>
   <pre><code>from app import db

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nickname = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    posts = db.relationship('Post', backref='author', lazy='dynamic')

    def __repr__(self):
        return '&lt;User %r&gt;' % (self.nickname)

class Post(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    body = db.Column(db.String(140))
    timestamp = db.Column(db.DateTime)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))

    def __repr__(self):
        return '&lt;Post %r&gt;' % (self.body)
</code></pre>
   <p>
    We have added the
    <code>
     Post
    </code>
    class, which will represent blog posts written by users. The
    <code>
     user_id
    </code>
    field in the
    <code>
     Post
    </code>
    class was initialized as a
    <em>
     foreign key
    </em>
    , so that Flask-SQLAlchemy knows that this field will link to a user.
   </p>
   <p>
    Note that we have also added a new field to the
    <code>
     User
    </code>
    class called
    <code>
     posts
    </code>
    , that is constructed as a
    <code>
     db.relationship
    </code>
    field. This is not an actual database field, so it isn't in our database diagram. For a one-to-many relationship a
    <code>
     db.relationship
    </code>
    field is normally defined on the "one" side. With this relationship we get a
    <code>
     user.posts
    </code>
    member that gets us the list of posts from the user. The first argument to
    <code>
     db.relationship
    </code>
    indicates the "many" class of this relationship. The
    <code>
     backref
    </code>
    argument defines a field that will be added to the objects of the "many" class that points back at the "one" object. In our case this means that we can use
    <code>
     post.author
    </code>
    to get the User instance that created a post. Don't worry if these details don't make much sense just yet, we'll see examples of this at the end of this article.
   </p>
   <p>
    Let's record another migration with this change. Simply run:
   </p>
   <pre><code>$ ./db_migrate.py
</code></pre>
   <p>
    And the script will respond:
   </p>
   <pre><code>New migration saved as db_repository/versions/002_migration.py
Current database version: 2
</code></pre>
   <p>
    It isn't really necessary to record each little change to the database model as a separate migration, a migration is normally only recorded at significant points in the history of the project. We are doing more migrations than necessary here only to show how the migration system works.
   </p>
   <h2>
    Play time
   </h2>
   <p>
    We have spent a lot of time defining our database, but we haven't seen how it works yet. Since our app does not have database code yet let's make use of our brand new database in the Python interpreter.
   </p>
   <p>
    So go ahead and fire up Python. On Linux or OS X:
   </p>
   <pre><code>flask/bin/python
</code></pre>
   <p>
    Or on Windows:
   </p>
   <pre><code>flask\Scripts\python
</code></pre>
   <p>
    Once in the Python prompt enter the following:
   </p>
   <pre><code>&gt;&gt;&gt; from app import db, models
&gt;&gt;&gt;
</code></pre>
   <p>
    This brings our database and models into memory.
   </p>
   <p>
    Let's create a new user:
   </p>
   <pre><code>&gt;&gt;&gt; u = models.User(nickname='john', email='john@email.com')
&gt;&gt;&gt; db.session.add(u)
&gt;&gt;&gt; db.session.commit()
&gt;&gt;&gt;
</code></pre>
   <p>
    Changes to a database are done in the context of a session. Multiple changes can be accumulated in a session and once all the changes have been registered you can issue a single
    <code>
     db.session.commit()
    </code>
    , which writes the changes atomically. If at any time while working on a session there is an error, a call to
    <code>
     db.session.rollback()
    </code>
    will revert the database to its state before the session was started. If neither
    <code>
     commit
    </code>
    nor
    <code>
     rollback
    </code>
    are issued then the system by default will roll back the session. Sessions guarantee that the database will never be left in an inconsistent state.
   </p>
   <p>
    Let's add another user:
   </p>
   <pre><code>&gt;&gt;&gt; u = models.User(nickname='susan', email='susan@email.com')
&gt;&gt;&gt; db.session.add(u)
&gt;&gt;&gt; db.session.commit()
&gt;&gt;&gt;
</code></pre>
   <p>
    Now we can query what our users are:
   </p>
   <pre><code>&gt;&gt;&gt; users = models.User.query.all()
&gt;&gt;&gt; users
[&lt;User u'john'&gt;, &lt;User u'susan'&gt;]
&gt;&gt;&gt; for u in users:
...     print(u.id,u.nickname)
...
1 john
2 susan
&gt;&gt;&gt;
</code></pre>
   <p>
    For this we have used the
    <code>
     query
    </code>
    member, which is available in all model classes. Note how the
    <code>
     id
    </code>
    member was automatically set for us.
   </p>
   <p>
    Here is another way to do queries. If we know the
    <code>
     id
    </code>
    of a user we can find the data for that user as follows:
   </p>
   <pre><code>&gt;&gt;&gt; u = models.User.query.get(1)
&gt;&gt;&gt; u
&lt;User u'john'&gt;
&gt;&gt;&gt;
</code></pre>
   <p>
    Now let's add a blog post:
   </p>
   <pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; u = models.User.query.get(1)
&gt;&gt;&gt; p = models.Post(body='my first post!', timestamp=datetime.datetime.utcnow(), author=u)
&gt;&gt;&gt; db.session.add(p)
&gt;&gt;&gt; db.session.commit()
</code></pre>
   <p>
    Here we set our
    <code>
     timestamp
    </code>
    in UTC time zone. All timestamps stored in our database will be in UTC. We can have users from all over the world writing posts and we need to use uniform time units. In a future tutorial we will see how to show these times to users in their local timezone.
   </p>
   <p>
    You may have noticed that we have not set the
    <code>
     user_id
    </code>
    field of the Post class. Instead, we are storing a User object inside the
    <code>
     author
    </code>
    field. The
    <code>
     author
    </code>
    field is a virtual field that was added by Flask-SQLAlchemy to help with relationships, we have defined the name of this field in the
    <code>
     backref
    </code>
    argument to
    <code>
     db.relationship
    </code>
    in our model. With this information the ORM layer will know how to complete the
    <code>
     user_id
    </code>
    for us.
   </p>
   <p>
    To complete this session, let's look at a few more database queries that we can do:
   </p>
   <pre><code># get all posts from a user
&gt;&gt;&gt; u = models.User.query.get(1)
&gt;&gt;&gt; u
&lt;User u'john'&gt;
&gt;&gt;&gt; posts = u.posts.all()
&gt;&gt;&gt; posts
[&lt;Post u'my first post!'&gt;]

# obtain author of each post
&gt;&gt;&gt; for p in posts:
...     print(p.id,p.author.nickname,p.body)
...
1 john my first post!

# a user that has no posts
&gt;&gt;&gt; u = models.User.query.get(2)
&gt;&gt;&gt; u
&lt;User u'susan'&gt;
&gt;&gt;&gt; u.posts.all()
[]

# get all users in reverse alphabetical order
&gt;&gt;&gt; models.User.query.order_by('nickname desc').all()
[&lt;User u'susan'&gt;, &lt;User u'john'&gt;]
&gt;&gt;&gt;
</code></pre>
   <p>
    The
    <a href="http://packages.python.org/Flask-SQLAlchemy/index.html">
     Flask-SQLAlchemy
    </a>
    documentation is the best place to learn about the many options that are available to query the database.
   </p>
   <p>
    Before we close, let's erase the test users and posts we have created, so that we can start from a clean database in the next chapter:
   </p>
   <pre><code>&gt;&gt;&gt; users = models.User.query.all()
&gt;&gt;&gt; for u in users:
...     db.session.delete(u)
...
&gt;&gt;&gt; posts = models.Post.query.all()
&gt;&gt;&gt; for p in posts:
...     db.session.delete(p)
...
&gt;&gt;&gt; db.session.commit()
&gt;&gt;&gt;
</code></pre>
   <h2>
    Final words
   </h2>
   <p>
    This was a long tutorial. We have learned the basics of working with a database, but we haven't incorporated the database into our application yet. In the next chapter we will put all we have learned about databases into practice when we look at our user login system.
   </p>
   <p>
    In the meantime, if you haven't been writing the application along, you may want to download it in its current state:
   </p>
   <p>
    Download
    <a href="https://github.com/miguelgrinberg/microblog/archive/version-0.4.zip">
     microblog-0.4.zip
    </a>
    .
   </p>
   <p>
    Note that I have not included a database in the zip file above, but the repository with the migrations is there. To create a new database just use the
    <code>
     db_create.py
    </code>
    script, then use
    <code>
     db_upgrade.py
    </code>
    to upgrade the database to the latest revision.
   </p>
   <p>
    I hope to see you next time!
   </p>
   <p>
    Miguel
   </p>
  </div>
  <div class="social-bar">
   <table>
    <tr>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <a class="twitter-share-button" data-count="vertical" data-url="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database" data-via="miguelgrinberg" href="https://twitter.com/share">
        Tweet
       </a>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-left: 6px;">
       <div class="fb-like" data-font="verdana" data-href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database" data-layout="box_count" data-send="false" data-show-faces="false" data-width="450">
       </div>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <g:plusone href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database" size="tall">
       </g:plusone>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <script data-counter="top" data-url="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database" type="IN/Share">
       </script>
      </div>
     </td>
    </tr>
   </table>
  </div>
  <h4 style="text-align: right">
   <a name="comments">
   </a>
   406 comments
  </h4>
  <div class="comment">
   <ul>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/441a790c0691b139c473c8944b1d2579?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #1
       </span>
       <span class="label label-primary">
        Alexander Manenko
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-05-20T10:50:32Z">
        2012-05-20T10:50:32Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Thank you for this article!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/5ae4402fd8da55d8d4c6580dc909ae2a?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #2
       </span>
       <span class="label label-primary">
        Doug
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-06-26T20:45:37Z">
        2012-06-26T20:45:37Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        First off, I just wanted to say that I love the flask tutorials, and look forward to more in the future. They are a huge help! Unfortunately, I am having a bit of trouble with the migration script and was wondering if you might be able to offer any insight. Inside of my models, I have the following column: 
date_added = db.Column(db.DateTime, default=datetime.datetime.utcnow)

When I run db_migrate.py it converts that into the following line inside of my migration: 
Column('date_added', DateTime, default=ColumnDefault(&lt;function &lt;lambda&gt; at 0x101dddd70&gt;))

Later, when this line of the db_migrate.py script hits that line it causes a SyntaxError:
a = api.upgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)

Any thoughts?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #3
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-06-27T00:01:28Z">
        2012-06-27T00:01:28Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Doug, thanks for your comments.
I couldn't find anything in writing that explains the problem, but it is clear that sqlalchemy-migrate does not know how to handle a column default that is a function instead of a regular value. The automatic generation of migration scripts is an experimental feature, so this may be one of the aspects that isn't very polished. Maybe if you fix the migration script by hand to have the default function it will work.
As a side comment, I prefer not to use these sort of implicit updates that happen outside of your control, as I believe they make the code harder to understand and maintain. I like changes to the database to be explicit and always under my control, so I always update fields myself.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/269de9b87f819b49f25d3fbf6fc51061?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #4
       </span>
       <span class="label label-primary">
        <a href="Http://bentortora.com">
         Ben
        </a>
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-03T09:16:28Z">
        2012-07-03T09:16:28Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel,

Thanks for these, they are amazingly helpful. 

I am currently having some issues querying against all posts from a date range, eg. The date 7 days. The issue comes from the fact that the datetime format doesn't recognize just the date part. 

I could not find much in the sqlalchemy documentation about it. 

Any help would be appreciated!

Thanks,

Ben
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #5
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-03T16:34:37Z">
        2012-07-03T16:34:37Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Ben, thanks for following the tutorial. To find posts that are in a date range you can use the filter() method of the query class. For example, if you want all posts between 2012-04-20 and 2012-04-27 you would do this: Post.query.filter(Post.date &gt;= datetime(2012,4,20), Post.date &lt; datetime(2012,4,27)). Note that the way I constructed the query you will get all the posts from the 20th to (and including) the 26th, but nothing from the 27th. If you wanted to include the 27th then you would say Post.date &lt; datetime(2012,4,28). I hope this makes sense. Thanks!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/5ae4402fd8da55d8d4c6580dc909ae2a?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #6
       </span>
       <span class="label label-primary">
        Doug
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-03T16:39:29Z">
        2012-07-03T16:39:29Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Miguel, you are awesome for responding to your comments so quickly! I wanted to say thank you for your response to mine last week. I came to the same conclusion as you about sqlalchemy-migrate not being able to handle functions as column defaults; Hopefully they address this in a future update. I was able to sidestep the issue by specifying the function as my default value in the model's constructor. Keep up the excellent work!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/36bfb43c27ac18bb006329eb2c9ccd4c?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #7
       </span>
       <span class="label label-primary">
        smitty
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-18T15:52:03Z">
        2012-07-18T15:52:03Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I went kinda crazy trying to use the introductory Flask examples with SQLalchemy. Chapter 18 of the Flask documentation seems key for defining a data model as a singly .py file, and then getting it to play nicely with Flask.
In my medium-weight pythonista opinion, the whole business of factory methods and function decorators cuts against the grain of the KISS principle that motivates python in general.
Possibly that is all 'nature of the beast'.
Cheers,
Chris
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/b50f24a5349355a5ce3845f2d1e1cf7e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #8
       </span>
       <span class="label label-primary">
        JonoB
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-19T12:36:33Z">
        2012-07-19T12:36:33Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        When I run ./db_create.py, i get a Permission denied error. What am I doing wrong?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/b50f24a5349355a5ce3845f2d1e1cf7e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #9
       </span>
       <span class="label label-primary">
        JonoB
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-19T12:55:12Z">
        2012-07-19T12:55:12Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        OK, fixed the permission issue. But now when I run ./db_create.py I get the following errors:
from: can't read /var/mail/migrate.versioning
from: can't read /var/mail/config
from: can't read /var/mail/config
line4: import: command not found
...etc
...etc
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/b50f24a5349355a5ce3845f2d1e1cf7e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #10
       </span>
       <span class="label label-primary">
        JonoB
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-19T14:04:32Z">
        2012-07-19T14:04:32Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Finally managed to sort this out. Ignore the shebang stuff. Just type:
python db_create.py

Also, __FILE__ should be __file__

Finally, the hyperlink to the file download doesn't work.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #11
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-19T15:45:06Z">
        2012-07-19T15:45:06Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @JonoB: #1 when you create a script in Unix/Cygwin you have to give it execute permission. You can do that by running 'chmod a+x db_create.py'. #2 it sounds like you did not install Flask using my method, explained in the first part of this tutorial, or at least did not follow it correctly. The shebang line is specifically constructed to invoke the Python interpreter in the environment that has the Flask stuff installed, sounds like you installed Flask in the global interpreter. There is no problem with that, it's just different than what I did.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #12
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-07-19T15:48:39Z">
        2012-07-19T15:48:39Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        And I have now fixed the download link. Sorry about that!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/126009b010bd069c3ce497e54d56c31e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #13
       </span>
       <span class="label label-primary">
        Josh
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-08-01T13:19:04Z">
        2012-08-01T13:19:04Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        I seem to be getting an error when running db_create... Not sure whats going on. I re-ran the flask installs from part1 and everything seems to be ok:

09:15 ~/code/python/microblog $ ./db_create.py 
Traceback (most recent call last):
  File "./db_create.py", line 3, in &lt;module&gt;
    from migrate.versioning import api
  File "/Users/josh/code/python/microblog/flask/lib/python2.7/site-packages/migrate/versioning/api.py", line 5, in &lt;module&gt;
    from migrate.versioning.repository import *
  File "/Users/josh/code/python/microblog/flask/lib/python2.7/site-packages/migrate/versioning/repository.py", line 8, in &lt;module&gt;
    from migrate.versioning import script,exceptions,version
  File "/Users/josh/code/python/microblog/flask/lib/python2.7/site-packages/migrate/versioning/script/__init__.py", line 1, in &lt;module&gt;
    from py import *
  File "/Users/josh/code/python/microblog/flask/lib/python2.7/site-packages/migrate/versioning/script/py.py", line 2, in &lt;module&gt;
    from logsql import LogsqlFile
  File "/Users/josh/code/python/microblog/flask/lib/python2.7/site-packages/migrate/versioning/script/logsql.py", line 2, in &lt;module&gt;
    from migrate.versioning import logengine
  File "/Users/josh/code/python/microblog/flask/lib/python2.7/site-packages/migrate/versioning/logengine.py", line 260, in &lt;module&gt;
    LogEngineStrategy()
  File "/Users/josh/code/python/microblog/flask/lib/python2.7/site-packages/migrate/versioning/logengine.py", line 253, in __init__
    super(LogEngineStrategy,self).__init__('logsql')
TypeError: __init__() takes exactly 1 argument (2 given)
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #14
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-08-01T16:25:51Z">
        2012-08-01T16:25:51Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Josh. I have sqlalchemy-migrate v0.7.2 installed here, and it does not have a versioning/logengine.py script. What version do you have? Look in directory /Users/josh/code/python/microblog/flask/lib/python2.7/site-packages for a directory that begins with "sqlalchemy_migrate" to find the version.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/126009b010bd069c3ce497e54d56c31e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #15
       </span>
       <span class="label label-primary">
        Josh
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-08-01T16:29:48Z">
        2012-08-01T16:29:48Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        It's showing SQLAlchemy-0.7.8-py2.7.

I'll try reverting to a prior version (7.2) and see if that fixes  the issue. 

I appreciate your quick response to this! It's a great tutorial.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/126009b010bd069c3ce497e54d56c31e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #16
       </span>
       <span class="label label-primary">
        Josh
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-08-01T16:42:57Z">
        2012-08-01T16:42:57Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Oops sorry it was sqlalchemy_migrate-0.7.2-py2.7.egg-info
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/126009b010bd069c3ce497e54d56c31e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #17
       </span>
       <span class="label label-primary">
        Josh
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-08-01T16:44:28Z">
        2012-08-01T16:44:28Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Ah, i'm stupid as hell! :P 

I did a pip install migrate in addition to pip install sqlalchemy_migrate. Once I uninstalled migrate it works! 

Sorry for the hassle!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #18
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-08-02T06:04:24Z">
        2012-08-02T06:04:24Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Josh: glad you figured it out. Thanks for your comments.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/eff021ed51af87cd437c7572a3f4fe6c?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #19
       </span>
       <span class="label label-primary">
        Raj
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-08-14T01:58:00Z">
        2012-08-14T01:58:00Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Very good write up.In this part , you have the reference to models in the __init__.py. which was followed  by the section to create the db using db_create.py As there were no models yet created ,running db_create.py is throwing an error . I had to remove the models, and I added reference to models in the __init__.py and then ran the db_migrate.py to have the tables created.Coming from heavy Java background , these articles are just what I need to see what I should be using for a quick poc or a full blown app.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #20
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-08-15T05:32:11Z">
        2012-08-15T05:32:11Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Raj: Thanks for your comment. I have corrected the error. The models.py file needs to be written before the database is created.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/484c110a949b3ffefe87fe6854b24e80?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #21
       </span>
       <span class="label label-primary">
        <a href="http://problematicsets.com">
         Robert Tsai
        </a>
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-10-19T20:20:26Z">
        2012-10-19T20:20:26Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Miguel, I love this tutorial. Thanks so much!

I had a couple of questions.  

After setting u to be the user john, when I tried to type the command:
posts = u.posts.all()
I got an error message-
AttributeError: 'InstrumentedList' object has no attribute 'all'
Am I doing something incorrectly here?  In my implementation u.posts returns a list, but I guess there is no all() method associated with this list object?

Second, in  #obtain author of each post 

I used:


for p in posts:
   print p.id, p.author.nickname, p.body

(as I think in your models section your backref for post is 'author' and not 'user')
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #22
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-10-20T16:00:46Z">
        2012-10-20T16:00:46Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Robert, you must have defined your posts relationship without the lazy = dynamic attribute, so when you say u.posts you get the result of evaluating the query, instead of the query object still unevaluated. And thanks for the correction on the other query. I went back and forth with the names of some of the fields and I forgot to update this particular one.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/27445addce189d9edb3f3d48823f525f?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #23
       </span>
       <span class="label label-primary">
        Catherine
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-11-07T21:48:43Z">
        2012-11-07T21:48:43Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel,
so I am working through the tutorial and everything is going great. I am interested to learn more about how to create better web interfaces to provide access to bioinformatics tools for biologists and geneticists (ie non computational scientists) and your tutorial is really helpful in understanding how to go about this.
Thanks!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/27445addce189d9edb3f3d48823f525f?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #24
       </span>
       <span class="label label-primary">
        Catherine
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-11-07T21:50:29Z">
        2012-11-07T21:50:29Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi (again)
Just noticed something unusual during the migrations...
upgrade skips to version 3? Here's the terminal output:
Catherines-MacBook-Pro:microblog catherine_penfold$ flask/bin/python db_migrate.py New migration saved as /Users/catherine_penfold/Sites/brownie/microblog/db_repository/versions/003_migration.py
Current database version: 3
Catherines-MacBook-Pro:microblog catherine_penfold$ flask/bin/python db_upgrade.py 
Current database version: 3
Catherines-MacBook-Pro:microblog catherine_penfold$ flask/bin/python db_downgrade.py 
Current database version: 2
Catherines-MacBook-Pro:microblog catherine_penfold$ flask/bin/python db_downgrade.py 
Current database version: 1
Catherines-MacBook-Pro:microblog catherine_penfold$ flask/bin/python db_downgrade.py 
Current database version: 0
Catherines-MacBook-Pro:microblog catherine_penfold$ flask/bin/python db_upgrade.py 
Current database version: 3
Catherines-MacBook-Pro:microblog catherine_penfold$

any ideas about what is going on?
Thanks
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #25
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2012-11-08T06:11:12Z">
        2012-11-08T06:11:12Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Catherine: the downgrade.py script goes back one revision at a time, but the upgrade.py script goes directly to the latest revision. The migration API supports going forward one by one, but I think that isn't a useful thing to do.
       </p>
      </div>
     </div>
    </li>
   </ul>
  </div>
  <div class="page">
   <ul class="pager">
    <li class="previous disabled">
     <a href="#">
      ««
     </a>
    </li>
    <li class="previous disabled">
     <a href="#">
      «
     </a>
    </li>
    <li class="next">
     <a href="/post/the-flask-mega-tutorial-part-iv-database/page/0#comments">
      »»
     </a>
    </li>
    <li class="next">
     <a href="/post/the-flask-mega-tutorial-part-iv-database/page/2#comments">
      »
     </a>
    </li>
   </ul>
  </div>
 </div>
</div>

    </html>
    