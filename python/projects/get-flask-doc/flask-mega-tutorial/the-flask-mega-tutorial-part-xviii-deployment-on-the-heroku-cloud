
    <!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>The Flask Mega-Tutorial</title>
    <link href="style.css" rel="stylesheet" type="text/css" />
    </head>
    <div id="main">
 <div class="post">
  <p class="date">
   <span class="flask-moment" data-format="format('LL')" data-refresh="0" data-timestamp="2013-04-24T06:24:58Z">
    2013-04-24T06:24:58Z
   </span>
  </p>
  <h1 class="post-title">
   <a href="/post/the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud">
    The Flask Mega-Tutorial, Part XVIII: Deployment on the Heroku Cloud
   </a>
  </h1>
  <div class="post_body">
   <p>
    This is the eighteenth article in the series in which I document my experience writing web applications in
    <a href="http://python.org">
     Python
    </a>
    using the
    <a href="http://flask.pocoo.org">
     Flask
    </a>
    microframework.
   </p>
   <p>
    The goal of the tutorial series is to develop a decently featured microblogging application that demonstrating total lack of originality I have decided to call
    <code>
     microblog
    </code>
    .
   </p>
   <p>
    <strong>
     NOTE
    </strong>
    : This article was revised in September 2014 to be in sync with current versions of Python and Flask.
   </p>
   <p>
    Here is an index of all the articles in the series that have been published to date:
   </p>
   <ul>
    <li>
     <a href="the-flask-mega-tutorial-part-i-hello-world">
      Part I: Hello, World!
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-ii-templates">
      Part II: Templates
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-iii-web-forms">
      Part III: Web Forms
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-iv-database">
      Part IV: Database
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-v-user-logins">
      Part V: User Logins
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-vi-profile-page-and-avatars">
      Part VI: Profile Page And Avatars
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-vii-unit-testing">
      Part VII: Unit Testing
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-viii-followers-contacts-and-friends">
      Part VIII: Followers, Contacts And Friends
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-ix-pagination">
      Part IX: Pagination
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-x-full-text-search">
      Part X: Full Text Search
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xi-email-support">
      Part XI: Email Support
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xii-facelift">
      Part XII: Facelift
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xiii-dates-and-times">
      Part XIII: Dates and Times
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xiv-i18n-and-l10n">
      Part XIV: I18n, L10n
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xv-ajax">
      Part XV: Ajax
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xvi-debugging-testing-and-profiling">
      Part XVI: Debugging, Testing and Profiling
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xvii-deployment-on-linux-even-on-the-raspberry-pi">
      Part XVII: Deployment on Linux (even on the Raspberry Pi!)
     </a>
    </li>
    <li>
     <a href="the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud">
      Part XVIII: Deployment on the Heroku Cloud
     </a>
     (this article)
    </li>
   </ul>
   <p>
    In the previous article we explored traditional hosting options. We've looked at two actual examples of deployment to Linux servers, first to a CentOS system and later to the Raspberry Pi credit card sized computer. Those that are not used to administer a Linux system probably thought the amount of effort we had to put into the task was huge, and that surely there must be an easier way.
   </p>
   <p>
    Today we will try to see if deploying to the
    <em>
     cloud
    </em>
    is the answer to the complexity problem.
   </p>
   <p>
    But what does it mean to "deploy to the cloud"?
   </p>
   <p>
    A cloud hosting provider offers a platform on which an application can run. All the developer needs to provide is the application, because the rest, which includes the hardware, operating system, scripting language interpreters and database, is managed by the service.
   </p>
   <p>
    Sounds too good to be true, right?
   </p>
   <p>
    We'll look at deploying to
    <a href="http://heroku.com">
     Heroku
    </a>
    , one of the most popular cloud hosting services. I picked Heroku not only because it is popular, but also because it has a free service level, so we get to host our application without having to spend any money. If you want to find information about this type of services and what other providers are out there you can consult the Wikipedia page on
    <a href="http://en.wikipedia.org/wiki/Platform_as_a_service">
     platform as a service
    </a>
    .
   </p>
   <h2>
    Hosting on Heroku
   </h2>
   <p>
    Heroku was one of the first platform as a service providers. It started as a hosting option for Ruby based applications, but then grew to support many other languages like Java, Node.js and our favorite, Python.
   </p>
   <p>
    In essence, deploying a web application to Heroku requires just uploading the application using
    <code>
     git
    </code>
    (you'll see how that works in a moment). Heroku looks for a file called
    <code>
     Procfile
    </code>
    in the application's root directory for instructions on how to execute the application. For Python projects Heroku also expects a
    <code>
     requirements.txt
    </code>
    file that lists all the module dependencies that need to be installed.
   </p>
   <p>
    After the application is uploaded you are essentially done. Heroku will do its magic and the application will be online within seconds. The amount of money you pay directly determines how much computing power you get for your application, so as your application gets more users you will need to buy more units of computing, which Heroku calls "dynos", and that is how you keep up with the load.
   </p>
   <p>
    Ready to try Heroku? Let's get started!
   </p>
   <h3>
    Creating Heroku account
   </h3>
   <p>
    Before we can deploy to Heroku we need to have an account with them. So head over to
    <a href="https://id.heroku.com/signup">
     heroku.com
    </a>
    and create an account.
   </p>
   <p>
    Once you are logged in you have access to a dashboard, where all your apps can be managed. We will not be using the dashboard much though, but it provides a nice view of your account.
   </p>
   <h3>
    Installing the Heroku client
   </h3>
   <p>
    Even though it is possible to manage applications from the Heroku web site to some extent, there are some things that can only be done from the command line, so we'll just do everything there.
   </p>
   <p>
    Heroku offers a tool called the "Heroku client" that we'll use to create and manage our application. This tool is available for Windows, Mac OS X and Linux. If there is a
    <a href="https://toolbelt.heroku.com/">
     Heroku toolbelt
    </a>
    download for your platform then that's the easiest way to get the Heroku client tool installed.
   </p>
   <p>
    The first thing we should do with the client tool is to login to our account:
   </p>
   <pre><code>$ heroku login
</code></pre>
   <p>
    Heroku will prompt for your email address and your account password. The first time you login it will send your public SSH key to the Heroku servers.
   </p>
   <p>
    Your authenticated status will be remembered in subsequent commands.
   </p>
   <h3>
    Git setup
   </h3>
   <p>
    The
    <code>
     git
    </code>
    tool is core to the deployment of apps to Heroku, so it must also be available. If you installed the Heroku toolbelt then you already have it as part of that installation.
   </p>
   <p>
    To deploy to Heroku the application must be in a local
    <code>
     git
    </code>
    repository, first so let's get one set up:
   </p>
   <pre><code>$ git clone -b version-0.18 git://github.com/miguelgrinberg/microblog.git
$ cd microblog
</code></pre>
   <p>
    Note that we are choosing a specific branch to be checked out, this is the branch that has the Heroku integration.
   </p>
   <h3>
    Creating a Heroku app
   </h3>
   <p>
    To create a new Heroku app you just use the
    <code>
     create
    </code>
    command from the root directory of the application:
   </p>
   <pre><code>$ heroku apps:create flask-microblog
Creating flask-microblog... done, stack is cedar
http://flask-microblog.herokuapp.com/ | git@heroku.com:flask-microblog.git
</code></pre>
   <p>
    In addition to setting up a URL this command adds a
    <a href="http://gitref.org/remotes/">
     git remote
    </a>
    to our
    <code>
     git
    </code>
    repository that we will soon use to upload the application.
   </p>
   <p>
    Of course the name
    <code>
     flask-microblog
    </code>
    is now taken by me, so make sure you use a different app name if you are doing this along.
   </p>
   <h3>
    Eliminating local file storage
   </h3>
   <p>
    Several of the functions of our application rely on writing data to disk files.
   </p>
   <p>
    Unfortunately we have a tricky problem with this. Applications that run on Heroku are not supposed to write permanent files to disk, because Heroku uses a virtualized platform that does not remember data files, the file system is reset to a clean state that just contains the application script files each time a virtual worker is started. Essentially this means that the application can write temporary files to disk, but should be able to regenerate those files should they disappear. Also when two or more workers (dynos) are in use each gets its own virtual file system, so it is not possible to share files among them.
   </p>
   <p>
    This is really bad news for us. For starters, it means we cannot use sqlite as a database, and our Whoosh full text search database will also fail to work, since it writes all its data to files. We also have the compiled translation files for Flask-Babel, which are generated when running the
    <code>
     tr_compile.py
    </code>
    script. And yet another area where there is problem is logging, we used to write our logfile.to the
    <code>
     tmp
    </code>
    folder and that is also not going to work when running on Heroku.
   </p>
   <p>
    We have identified four major problems for which we need to try to find solutions.
   </p>
   <p>
    For our first problem, the database, we'll migrate to Heroku's own database offering, which is based on
    <a href="http://www.postgresql.org">
     PostgreSQL
    </a>
    .
   </p>
   <p>
    For the full text search functionality we don't have a readily available alternative. We could re-implement full text searches using PostgreSQL functionality, but that would require several changes to our application. It is a pity, but solving this problem now would be a huge distraction, so for now we'll disable full text searches when running under Heroku.
   </p>
   <p>
    To support translations we are going to include the compiled translation files in the git repository, that way these files will be persistant in the file system.
   </p>
   <p>
    Finally, since we can't write our own log file, we'll add our logs to the logger that Heroku uses, which is actually simple, since Heroku will add to its log anything that goes to
    <code>
     stdout
    </code>
    .
   </p>
   <h3>
    Creating a Heroku database
   </h3>
   <p>
    To create a database we use the Heroku client:
   </p>
   <pre><code>$ heroku addons:add heroku-postgresql:dev
Adding heroku-postgresql:dev on flask-microblog... done, v3 (free)
Attached as HEROKU_POSTGRESQL_ORANGE_URL
Database has been created and is available
 ! This database is empty. If upgrading, you can transfer
 ! data from another database with pgbackups:restore.
Use `heroku addons:docs heroku-postgresql:dev` to view documentation.
$ heroku pg:promote HEROKU_POSTGRESQL_ORANGE_URL
Promoting HEROKU_POSTGRESQL_ORANGE_URL to DATABASE_URL... done
</code></pre>
   <p>
    Note that we are adding a development database, because that is the only database offering that is free. A production web server would need one of the production database options.
   </p>
   <p>
    And how does our application know the details to connect to this database? Heroku publishes the URI to the database in the
    <code>
     $DATABASE_URL
    </code>
    environment variable. If you recall, we have modified our configuration to look for this variable in the previous hosting article, so the changes are already in place to connect with this database.
   </p>
   <h3>
    Disabling full text searches
   </h3>
   <p>
    To disable full text searches we need our application to be able to know if it is running under Heroku or not. For this we will add a custom environment variable, again using the Heroku client tool:
   </p>
   <pre><code>heroku config:set HEROKU=1
</code></pre>
   <p>
    The
    <code>
     HEROKU
    </code>
    environment variable will now be set to
    <code>
     1
    </code>
    when our application runs inside the Heroku virtual platform.
   </p>
   <p>
    Now it is easy to disable the full text search index. First we add a configuration variable (file
    <code>
     config.py
    </code>
    ):
   </p>
   <pre><code># Whoosh does not work on Heroku
WHOOSH_ENABLED = os.environ.get('HEROKU') is None
</code></pre>
   <p>
    Then we suppress the creation of the full text database instance (file
    <code>
     app/models.py
    </code>
    ):
   </p>
   <pre><code>from config import WHOOSH_ENABLED

enable_search = WHOOSH_ENABLED
if enable_search:
    import flask.ext.whooshalchemy as whooshalchemy

# ...
if enable_search:
    whooshalchemy.whoosh_index(app, Post)
</code></pre>
   <h3>
    Precompiled Tranlations
   </h3>
   <p>
    This one is pretty easy. After running
    <code>
     tr_compile.py
    </code>
    we end up with a
    <code>
     &lt;language&gt;.mo
    </code>
    file for each
    <code>
     &lt;language&gt;.po
    </code>
    source file. All we need to do is add the
    <code>
     mo
    </code>
    files to the git repository, and then in the future we'll have to remember to update them. The
    <code>
     mo
    </code>
    file for Spanish is included in the branch of the git repository dedicated to this article.
   </p>
   <h3>
    Fixing the logging
   </h3>
   <p>
    Under Heroku, anything that is written to
    <code>
     stdout
    </code>
    is added to the Heroku application log. But logs written to a disk file will not be accessible. So on this platform we will suppress the file log and instead use a log that writes to
    <code>
     stdout
    </code>
    (file
    <code>
     app/__init__.py
    </code>
    ):
   </p>
   <pre><code>if not app.debug and os.environ.get('HEROKU') is None:
    import logging
    from logging.handlers import RotatingFileHandler
    file_handler = RotatingFileHandler('tmp/microblog.log', 'a', 1 * 1024 * 1024, 10)
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'))
    app.logger.addHandler(file_handler)
    app.logger.setLevel(logging.INFO)
    app.logger.info('microblog startup')

if os.environ.get('HEROKU') is not None:
    import logging
    stream_handler = logging.StreamHandler()
    app.logger.addHandler(stream_handler)
    app.logger.setLevel(logging.INFO)
    app.logger.info('microblog startup')
</code></pre>
   <h3>
    The web server
   </h3>
   <p>
    Heroku does not provide a web server. Instead, it expects the application to start its own server on the port number given in environment variable
    <code>
     $PORT
    </code>
    .
   </p>
   <p>
    We know the Flask web server is not good for production use because it is single process and single threaded, so we need a better server. The Heroku tutorial for Python suggests
    <a href="http://gunicorn.org/">
     gunicorn
    </a>
    , a pre-fork style web server written in Python, so that's the one we'll use.
   </p>
   <p>
    For our local environment
    <code>
     gunicorn
    </code>
    installs as a regular python module into our virtual environment:
   </p>
   <pre><code>$ flask/bin/pip install gunicorn
</code></pre>
   <p>
    To start this browser we need to provide a single argument that names the Python module that defines the application and the application object, both separated by a colon. Now for example, if we wanted to start a local
    <code>
     gunicorn
    </code>
    server with this module we would issue the following command:
   </p>
   <pre><code>$ flask/bin/gunicorn --log-file - app:app
2013-04-24 08:42:34 [31296] [INFO] Starting gunicorn 19.1.1
2013-04-24 08:42:34 [31296] [INFO] Listening at: http://127.0.0.1:8000 (31296)
2013-04-24 08:42:34 [31296] [INFO] Using worker: sync
2013-04-24 08:42:34 [31301] [INFO] Booting worker with pid: 31301
</code></pre>
   <h3>
    The requirements file
   </h3>
   <p>
    Soon we will be uploading our application to Heroku, but before we can do that we have to inform the server what dependencies the application needs to run. We created a
    <code>
     requirements.txt
    </code>
    file in the previous chapter, to simplify the installation of dependencies in a dedicated server, and the good news is that Heroku also imports dependencies from a requirements file.
   </p>
   <p>
    The
    <code>
     gunicorn
    </code>
    web server needs to be added to the list, and so is the
    <code>
     psycopg2
    </code>
    driver, which is required by SQLAlchemy to connect to PostgreSQL databases. The final
    <code>
     requirements.txt
    </code>
    file looks like this:
   </p>
   <pre><code>Babel==1.3
Flask==0.10.1
Flask-Babel==0.9
Flask-Login==0.2.11
Flask-Mail==0.9.0
Flask-OpenID==1.2.1
Flask-SQLAlchemy==2.0
Flask-WTF==0.10.2
Flask-WhooshAlchemy==0.56
Jinja2==2.7.3
MarkupSafe==0.23
SQLAlchemy==0.9.7
Tempita==0.5.2
WTForms==2.0.1
Werkzeug==0.9.6
Whoosh==2.6.0
blinker==1.3
coverage==3.7.1
decorator==3.4.0
flipflop==1.0
guess-language==0.2
gunicorn==19.1.1
itsdangerous==0.24
pbr==0.10.0
psycopg2==2.5.4
python-openid==2.2.5
pytz==2014.7
six==1.8.0
speaklater==1.3
sqlalchemy-migrate==0.9.2
sqlparse==0.1.11
</code></pre>
   <p>
    Some of these modules will not be needed in the Heroku version of our application, but it really doesn't hurt to have extra stuff, to me it seems better to have a complete requirements list.
   </p>
   <h3>
    The Procfile
   </h3>
   <p>
    The last requirement is to tell Heroku how to run the application. For this Heroku requires a file called
    <code>
     Procfile
    </code>
    in the root folder of the application.
   </p>
   <p>
    This file is extremely simple, it just defines process names and the commands associated with them (file
    <code>
     Procfile
    </code>
    ):
   </p>
   <pre><code>web: gunicorn app:app
init: python db_create.py
upgrade: python db_upgrade.py
</code></pre>
   <p>
    The
    <code>
     web
    </code>
    label is associated with the web server. Heroku expects this task and will use it to start our application.
   </p>
   <p>
    The other two tasks, named
    <code>
     init
    </code>
    and
    <code>
     upgrade
    </code>
    are custom tasks that we will use to work with our application. The init task initializes our application by creating the database. The upgrade task is similar, but instead of creating the database from scratch it upgrades it to the latest migration.
   </p>
   <h3>
    Deploying the application
   </h3>
   <p>
    And now we have reached the most interesting part, where we push the application to our Heroku hosting account. This is actually pretty simple, we just use
    <code>
     git
    </code>
    to push the application:
   </p>
   <pre><code>$ git push heroku master
Counting objects: 307, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (168/168), done.
Writing objects: 100% (307/307), 165.57 KiB, done.
Total 307 (delta 142), reused 272 (delta 122)

-----&gt; Python app detected
-----&gt; No runtime.txt provided; assuming python-2.7.4.
-----&gt; Preparing Python runtime (python-2.7.4)
-----&gt; Installing Distribute (0.6.36)
-----&gt; Installing Pip (1.3.1)
-----&gt; Installing dependencies using Pip (1.3.1)
...
-----&gt; Discovering process types
       Procfile declares types -&gt; init, upgrade, web

-----&gt; Compiled slug size: 29.6MB
-----&gt; Launching... done, v6
       http://flask-microblog.herokuapp.com deployed to Heroku

To git@heroku.com:flask-microblog.git
 * [new branch]      master -&gt; master
</code></pre>
   <p>
    The label
    <code>
     heroku
    </code>
    that we used in the
    <code>
     git push
    </code>
    command was automatically registered with our
    <code>
     git
    </code>
    repository when we created our application with
    <code>
     heroku create
    </code>
    . To see how this remote repository is configured you can run
    <code>
     git remote -v
    </code>
    in the application folder.
   </p>
   <p>
    The first time we push the application to Heroku we need to initialize the database and the translation files, and for that we can execute the
    <code>
     init
    </code>
    task that we included in our
    <code>
     Procfile
    </code>
    :
   </p>
   <pre><code>$ heroku run init
Running `init` attached to terminal... up, run.7671
/app/.heroku/python/lib/python2.7/site-packages/sqlalchemy/engine/url.py:105: SADeprecationWarning: The SQLAlchemy PostgreSQL dialect has been renamed from 'postgres' to 'postgresql'. The new URL format is postgresql[+driver]://&lt;user&gt;:&lt;pass&gt;@&lt;host&gt;/&lt;dbname&gt;
  module = __import__('sqlalchemy.dialects.%s' % (dialect, )).dialects
</code></pre>
   <p>
    The deprecation warning comes from SQLAlchemy, because it does not like that the URI starts with
    <code>
     postgres://
    </code>
    instead of
    <code>
     postgresql://
    </code>
    . This URI comes from Heroku via the
    <code>
     $DATABASE_URL
    </code>
    environment variable, so we really don't have any control over this. Let's hope this continues to work for a long time.
   </p>
   <p>
    Believe it or not, now the application is online. In my case, the application can be accessed at
    <a href="http://flask-microblog.herokuapp.com">
     http://flask-microblog.herokuapp.com
    </a>
    . For example, you can become my follower from my
    <a href="http://flask-microblog.herokuapp.com/user/miguel.grinberg">
     profile page
    </a>
    . I'm not sure how long I'll leave it there, but feel free to give it a try if you can connect to it!
   </p>
   <h3>
    Updating the application
   </h3>
   <p>
    The time will come when an update needs to be deployed. This works in a similar way to the initial deployment. First the application is pushed from
    <code>
     git
    </code>
    :
   </p>
   <pre><code>$ git push heroku master
</code></pre>
   <p>
    Then the upgrade script is executed:
   </p>
   <pre><code>$ heroku run upgrade
</code></pre>
   <h3>
    Logging
   </h3>
   <p>
    If a problem occurs then it may be useful to see the logs. Recall that for the Heroku hosted version we are writing our logs to
    <code>
     stdout
    </code>
    which Heroku collects into its own logs.
   </p>
   <p>
    To see the logs we use the Heroku client:
   </p>
   <pre><code>$ heroku logs
</code></pre>
   <p>
    The above command will show all the logs, including Heroku ones. To only see application logs we can use this command:
   </p>
   <pre><code>$ heroku logs --source app
</code></pre>
   <p>
    Things like stack traces and other application errors will appear in these app logs.
   </p>
   <h2>
    Is it worth it?
   </h2>
   <p>
    We've now seen what it takes to deploy to a cloud hosting service so we can now compare against the traditional hosting.
   </p>
   <p>
    The simplicity aspect is easily won by cloud. At least for Heroku the deployment process was extremely simple. When deploying to a dedicated server or VPS there are a lot of administrative tasks that need to be done to prepare the system. Heroku takes care of all that and allows us to concentrate on our application.
   </p>
   <p>
    The price is where it is harder to come to a conclusion. Cloud offerings are more expensive than dedicated servers, since you are not only paying for the server but also for the admin work. A pretty basic production service with Heroku that includes two dynos and the least expensive production database costs $85 per month at the time I'm writing this. On the other side, if you look hard you can find well provisioned VPS servers for abour $40 per year.
   </p>
   <p>
    In the end, I think it all comes down to what is most important to you, time or money.
   </p>
   <h2>
    The End?
   </h2>
   <p>
    The updated application is available, as always, on my
    <a href="https://github.com/miguelgrinberg/microblog/tree/version-0.18">
     github page
    </a>
    . Alternatively you can download it as a zip file below:
   </p>
   <p>
    Download
    <a href="https://github.com/miguelgrinberg/microblog/archive/version-0.18.zip">
     microblog 0.18
    </a>
    .
   </p>
   <p>
    With our application deployed in every possible way it feels like we are reaching the end of this journey.
   </p>
   <p>
    I hope these articles were a useful introduction to the development of a real world web application project, and that the knowledge dump I've made over these eighteen articles motivates you to start your own project.
   </p>
   <p>
    I'm not closing the door to more
    <code>
     microblog
    </code>
    articles. If and when an interesting topic comes to mind I will write more, but I expect the rate of updates from now on will slow down a bit. From time to time I may make small updates to the application that don't deserve a blog post, so you may want to
    <a href="https://github.com/miguelgrinberg/microblog">
     watch the project on github
    </a>
    to catch these.
   </p>
   <p>
    I will continue blogging about topics related to web development and software in general, so I invite you to connect via
    <a href="https://twitter.com/#!/miguelgrinberg">
     Twitter
    </a>
    or
    <a href="https://www.facebook.com/miguelgrinbergblog">
     Facebook
    </a>
    if you haven't done it yet, so that you find my future articles.
   </p>
   <p>
    Thank you, again, for being a loyal reader.
   </p>
   <p>
    Miguel
   </p>
  </div>
  <div class="social-bar">
   <table>
    <tr>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <a class="twitter-share-button" data-count="vertical" data-url="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud" data-via="miguelgrinberg" href="https://twitter.com/share">
        Tweet
       </a>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-left: 6px;">
       <div class="fb-like" data-font="verdana" data-href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud" data-layout="box_count" data-send="false" data-show-faces="false" data-width="450">
       </div>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <g:plusone href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud" size="tall">
       </g:plusone>
      </div>
     </td>
     <td>
      <div class="social-box" style="padding-top: 8px;">
       <script data-counter="top" data-url="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud" type="IN/Share">
       </script>
      </div>
     </td>
    </tr>
   </table>
  </div>
  <h4 style="text-align: right">
   <a name="comments">
   </a>
   84 comments
  </h4>
  <div class="comment">
   <ul>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/3474ef7d05f6e9dda63fbeb7880569df?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #1
       </span>
       <span class="label label-primary">
        <a href="yourdailyfact.com">
         Jonathan Grahl
        </a>
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-04-24T07:11:38Z">
        2013-04-24T07:11:38Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Awesome content! Loving these tutorials that you are making, I can't wait to see what content you may release in the future!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/9fe598449817a5b72b657b112a2dbc01?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #2
       </span>
       <span class="label label-primary">
        Anonymous
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-05-02T14:51:01Z">
        2013-05-02T14:51:01Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        The whole series is an excellent tutorial. Thank you, you saved me a lot of time figuring out all that stuff. You should ask for donations on your page. I have never tipped people on the web, but would definitely do it for this!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/0dbe84c55608a536da4850fed7fbc9f3?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #3
       </span>
       <span class="label label-primary">
        mark lilly
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-05-07T19:11:36Z">
        2013-05-07T19:11:36Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        This whole series is indeed epic, and from one Portlander to another, thank you!!

Are you using Flask for production systems at present?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #4
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-05-08T04:23:18Z">
        2013-05-08T04:23:18Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Mark: You are welcome. This blog is powered by Flask.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/67f130fcea8ee55147b8e59cdb882f3e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #5
       </span>
       <span class="label label-primary">
        Max
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-05-16T19:13:23Z">
        2013-05-16T19:13:23Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Thank you, Miguel !
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/d1410ae69bfbad5788d7f4161b342590?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #6
       </span>
       <span class="label label-primary">
        Gonzalo
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-05-17T19:03:31Z">
        2013-05-17T19:03:31Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel, excellent tutorial!! It's great!
Have you ever try flask-social or any other social auth module with flask?
Could you recommend me one?
Thanks!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #7
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-05-18T00:42:19Z">
        2013-05-18T00:42:19Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Gonzalo: Unfortunately I haven't used any oauth based plugins, so I can't really recommend you one. The two that seem to be supported in Flask are Flask-Social and Python-Social-Auth. Just from looking at the documentation for the two the latter seems to be more feature rich.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/b642b4217b34b1e8d3bd915fc65c4452?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #8
       </span>
       <span class="label label-primary">
        Anonymous
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-05-19T20:59:17Z">
        2013-05-19T20:59:17Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Thank you for taking the time to write this up and share this excellent series. I'm an experienced developer, but new to the python web-app ecosystem. Thanks! Have a great day
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/3e302415f77b6c398abc0b16efc653f3?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #9
       </span>
       <span class="label label-primary">
        Ralph Caraveo
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-05-23T17:54:14Z">
        2013-05-23T17:54:14Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Perhaps you can cover using Flask with Gevent.  These tools together are a wicked combination in getting a Flask app to scale with high concurrency.  I'm still learning about Gevent myself but I enjoy your writing style...and perhaps consider turning this into a book.  I'd buy a copy!   ;)
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/1b9d75a2f10beeda140e2b3ab4ac7584?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #10
       </span>
       <span class="label label-primary">
        zhangjingqiang
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-05-30T03:31:40Z">
        2013-05-30T03:31:40Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        The great tutorial!

Could you write a tornado tutorial like this?
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/8bae5bcf1e33a6de3c4832aa32a19402?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #11
       </span>
       <span class="label label-primary">
        Tri
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-10T06:59:11Z">
        2013-06-10T06:59:11Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Awesome tutorial every time!
Thanks again.

You should do one where you want to incorporate maps into the app. Like a mini version of foursquare...with the ability to search for some predetermined locations from the database.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/77c3f07d0e0d91466f0807cbe50b6025?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #12
       </span>
       <span class="label label-primary">
        anaheim
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-13T14:09:05Z">
        2013-06-13T14:09:05Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hi Miguel,
great tutorial!
Could you guide mi in the right direction for letting users login with their facebook account? Cheers
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #13
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-14T02:30:35Z">
        2013-06-14T02:30:35Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @anaheim: to login with Facebook/Twitter etc. you need to implement an oauth consumer. See Flask-OAuth, an extension that is similar in functionality to Flask-OpenID.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/77c3f07d0e0d91466f0807cbe50b6025?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #14
       </span>
       <span class="label label-primary">
        anaheim
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-14T08:19:00Z">
        2013-06-14T08:19:00Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Thanks Miguel! 
any idea what is wrong with the flask_login.py ? I keep getting a TypeErrore from there: https://gist.github.com/anonymous/5780302
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #15
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-06-14T15:43:54Z">
        2013-06-14T15:43:54Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Looks like Flask 0.10 (or one of its dependencies) introduced this incompatibility with Flask-Login. You can avoid the issue by first uninstalling Flask, Werkzeug and Jinja2, then installing Flask==0.9, Wekzeug==0.8.3 and Jinja2==2.6.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/7363f2a97ce4ca6f46b96d621288a893?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #16
       </span>
       <span class="label label-primary">
        ebenpack
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-07-18T16:52:55Z">
        2013-07-18T16:52:55Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Miguel,
Am I wrong, or wouldn't updating with git push be a little more complicated? For example, you don't want to publish your CSRF key, email password, etc. on github, so you're going to have to update your config file after pulling. How do you deal with this when updating?
Another example is that I want to include a "Fork me on github" banner, analytics code, etc. in my templates, but I don't feel like it's right to have those hard-coded in the template posted on github (not that they're secret, I just feel the project should be more general/easier to fork on github). Right now I have a bash deployment script that pulls from git, copies in some image assets, and uses sed to add the analytics code and github banner. It works fine, but it feels messy and fragile. Any thoughts?
Thanks
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #17
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-07-19T05:15:04Z">
        2013-07-19T05:15:04Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @ebenpack: for a real project I would probably not host it on a public github, it would be a on a private server under my own control. Another option would be to have predetermined environment variables that can override these configuration values. You would set these in your Heroku environment, similarly to how Heroku configures the database to use through the environment.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/21b77153f7d68cd7d71b79dfe7007ce8?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #18
       </span>
       <span class="label label-primary">
        Kelly Dresser
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-07-19T06:48:50Z">
        2013-07-19T06:48:50Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Thank you again for a terrific series of tutorials!  I've found much new &amp; useful information here.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/1ca9ad35638d3a2b4416a4b18471fd2e?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #19
       </span>
       <span class="label label-primary">
        jslopez
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-07-30T01:54:12Z">
        2013-07-30T01:54:12Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Thanks a lot for the tutorial.

How do you handle the compilation file for the translations? In my case, it's been discarded by heroku, due to the local storage issue that you described.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #20
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-07-30T02:54:45Z">
        2013-07-30T02:54:45Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @jslopez: that's actually an oversight on my part. The compilation to .mo needs to happen each time a new node is started. So this should be incorporated into the runp-heroku script instead of executed manually during setup. Good catch, I'll review and update the article.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/28d7885057c5ab39ac31b5218d368bc4?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #21
       </span>
       <span class="label label-primary">
        Joe
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-08-03T06:28:21Z">
        2013-08-03T06:28:21Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Dear Miguel, 
Thank you so much for this tutorial. And I can't wait for your book. I'm interested in implementing full text search using PostgreSQL, can you please give me some hints/ advices. Thanks in advance.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #22
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-08-03T06:35:31Z">
        2013-08-03T06:35:31Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Joe: Thanks. The following article may give you a starting point to support full text search with Postgres: http://lowmanio.co.uk/blog/entries/postgresql-full-text-search-and-sqlalchemy/.
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/28d7885057c5ab39ac31b5218d368bc4?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #23
       </span>
       <span class="label label-primary">
        Joe Jean
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-08-04T02:35:46Z">
        2013-08-04T02:35:46Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Hey Miguel, 
Today I came across SQLAlchemy-Searchable (http://sqlalchemy-searchable.readthedocs.org/en/latest/) which works pretty well with PostgreSQL and does not store data in file. The latest version does however require SQLAlchemy 0.8 or higher. Check their github repo for some examples. It works for me, that 's why I decided to share it with you!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/729e26a2a2c7ff24a71958d4aa4e5f35?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #24
       </span>
       <span class="label label-danger">
        Miguel Grinberg
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-08-04T04:43:44Z">
        2013-08-04T04:43:44Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        @Joe: Thanks, looks promising!
       </p>
      </div>
     </div>
    </li>
    <li>
     <div class="comment-thumbnail">
      <img src="http://gravatar.com/avatar/c95d4adc5d72d7361c9f421b001d0a13?s=60&amp;d=identicon"/>
     </div>
     <div class="comment-body">
      <p>
       <span class="label label-default">
        #25
       </span>
       <span class="label label-primary">
        mick
       </span>
       said
       <span class="flask-moment" data-format="fromNow(0)" data-refresh="0" data-timestamp="2013-08-14T17:01:30Z">
        2013-08-14T17:01:30Z
       </span>
      </p>
      <div style="overflow: auto;">
       <p style="white-space: pre-wrap;">
        Dear Miguel, thank you for the tutorial.
I'm using whoosh search as an integral part of my project. How do you suggest I solve this problem in order to deploy it on heroku. Thank you
       </p>
      </div>
     </div>
    </li>
   </ul>
  </div>
  <div class="page">
   <ul class="pager">
    <li class="previous disabled">
     <a href="#">
      ««
     </a>
    </li>
    <li class="previous disabled">
     <a href="#">
      «
     </a>
    </li>
    <li class="next">
     <a href="/post/the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud/page/0#comments">
      »»
     </a>
    </li>
    <li class="next">
     <a href="/post/the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud/page/2#comments">
      »
     </a>
    </li>
   </ul>
  </div>
  <h3>
   <a name="commentform">
   </a>
   Leave a Comment
  </h3>
  <form action="#commentform" class="form" method="post" role="form">
   <div style="display:none;">
    <input id="csrf_token" name="csrf_token" type="hidden" value="1452908260.0##96a3bf18ed2c8ef2fa288646a741db106041cd9b"/>
   </div>
   <div class="form-group ">
    <label class="control-label" for="name">
     Name
    </label>
    <input class="form-control" id="name" name="name" required="" type="text" value=""/>
   </div>
   <div class="form-group ">
    <label class="control-label" for="url">
     URL
    </label>
    <input class="form-control" id="url" name="url" type="text" value=""/>
   </div>
   <div class="form-group ">
    <label class="control-label" for="email">
     Email
    </label>
    <input class="form-control" id="email" name="email" required="" type="text" value=""/>
   </div>
   <div class="form-group ">
    <label class="control-label" for="comment">
     Comment
    </label>
    <textarea class="form-control" id="comment" name="comment" required="">
    </textarea>
   </div>
   <div class="form-group ">
    <label class="control-label" for="captcha">
     Captcha
    </label>
    <script type="text/javascript">
     var RecaptchaOptions = {"custom_translations": {"audio_challenge": "Get an audio challenge", "cant_hear_this": "Download sound as MP3", "help_btn": "Help", "image_alt_text": "reCAPTCHA challenge image", "incorrect_try_again": "Incorrect. Try again.", "instructions_audio": "Type what you hear", "instructions_visual": "Type the text", "play_again": "Play sound again", "privacy_and_terms": "Privacy & Terms", "refresh_btn": "Get a new challenge", "visual_challenge": "Get a visual challenge"}, "theme": "white"};
    </script>
    <script src="//www.google.com/recaptcha/api/challenge?k=6Ld5Zs4SAAAAAOY0DOi4r18bgHlEaz41qAoRf__S" type="text/javascript">
    </script>
    <noscript>
     <iframe frameborder="0" height="300" src="//www.google.com/recaptcha/api/noscript?k=6Ld5Zs4SAAAAAOY0DOi4r18bgHlEaz41qAoRf__S" width="500">
     </iframe>
     <br/>
     <textarea cols="40" name="recaptcha_challenge_field" rows="3">
     </textarea>
     <input name="recaptcha_response_field" type="hidden" value="manual_challenge"/>
    </noscript>
   </div>
   <input class="btn btn-default" id="submit" name="submit" type="submit" value="Submit"/>
  </form>
 </div>
</div>

    </html>
    